#![allow(non_upper_case_globals)]
#![allow(dead_code)]

use libloading::{Library, Symbol};

use std::ffi::CStr;
use std::mem;
use std::borrow::Cow;
use std::collections::HashMap;
use std::convert::TryInto;
use std::env;
use libc;
use ::{NVCtrlFanControlState, NvFanController};

const NVAPI_SHORT_STRING_MAX: usize = 64;
const NVAPI_MAX_PHYSICAL_GPUS: usize = 64;
const NVAPI_MAX_THERMAL_SENSORS_PER_GPU: usize = 3;
const NVAPI_MAX_COOLERS_PER_GPU: usize = 3;
const NVAPI_CLIENT_MAX_COOLERS_PER_GPU: usize = 32;
const NVAPI_MAX_USAGES_PER_GPU: usize = 33;
const NVAPI_COOLER_TARGET_ALL: usize = 7;

#[cfg(target_arch="x86")]type QueryPtr = u32;
#[cfg(target_arch="x86")]const NVAPI_DLL: &'static str = "nvapi.dll";

#[cfg(target_arch="x86_64")]type QueryPtr = u64;
#[cfg(target_arch="x86_64")]const NVAPI_DLL: &'static str = "nvapi64.dll";

/// Query codes for NvAPI functions hidden from the public API. This is used
/// in conjuction with `NvAPI_QueryInterface`. There are implementations for
/// all the variants defined in `QueryCode`.
#[allow(dead_code)]
#[repr(u32)]
#[allow(non_camel_case_types)]
enum QueryCode {
    // Initialize and Unload are not in nvapi.dll? 0.o
    Initialize = 0x150E828,
    Unload = 0x0D22BDD7E,
    SetCoolerLevels = 0x891FA0AE,
    GetCoolerSettings = 0xDA141340,
    GetUsages = 0x189A1FDF,
    ClientFanCoolersGetInfo = 0xFB85B01E,
    ClientFanCoolersGetStatus = 0x35AED5E8,
    ClientFanCoolersGetControl = 0x814B209F,
    ClientFanCoolersSetControl = 0xA58971A5,
    NvAPI_EnumPhysicalGPUs = 0xE5AC921F,
    GpuGetTachReadings = 0x5F608315,
    Func30E40910 = 0x33C7358C,
    FuncC0E30910 = 0x593E8644,
    FuncB0E90910 = 0x9E8AF554,
    Func00E80910 = 0xAD298D3F,
    FuncD0E80910 = 0xD7C61344,
    Func90270A10 = 0x6C2D048C,
    Func30400A10 = 0x01053FA5,
    Func70B61010 = 0x37D32E69,
    FuncF0901010 = 0x4ECA2C10,
    FuncB0931010 = 0x9F473113,
    Func10A51110 = 0x4FCB326E,
    FuncB0310D10 = 0x30C805D5,
    Func00880D10 = 0xE04F3D86,
    FuncC0A60D10 = 0x0957D7B6,
    Func00A90D10 = 0x06B89E68,
    FuncC0180D10 = 0xB3BB0772,
    FuncC06A2510 = 0xBB9EF1C3,
    Func00702C10 = 0xA36B6A85,
    Func20722C10 = 0x345C5135,
    FuncE0742C10 = 0x9A10A809,
    FuncD0812C10 = 0xA652B8B3,
    Func80822C10 = 0xEE401D43,
    Func606F2C10 = 0xC8B007DF,
    Func407A2C10 = 0x785BBDA4,
    Func90842C10 = 0xF2AE32C9,
    Func007D2C10 = 0xA8E5CF0C,
    Func00812C10 = 0x6985D54A,
    FuncB07E2C10 = 0x9F6EE934,
    Func907B2C10 = 0x907D15BB,
    Func207C2C10 = 0xA7A0F539,
    Func20872C10 = 0x648DCEB5,
    Func107B2C10 = 0x343C9695,
    FuncD0862C10 = 0x4108CAD8,
    FuncE07D2C10 = 0x5AB06757,
    Func10882C10 = 0x66D88F05,
    Func707F2C10 = 0x3743C166,
    Func30832C10 = 0x549D4354,
    FuncE0882C10 = 0xB24F1EA1,
    Func20732C10 = 0x3D37CEC1,
    FuncC0732C10 = 0xD1C0EA13,
    FuncE0792C10 = 0x8D9A865A,
    FuncA0752C10 = 0x750CC7CA,
    Func50802C10 = 0x096FAC80,
    FuncE0832C10 = 0xCB276F5C,
    FuncF0752C10 = 0xC264E4C9,
    Func10792C10 = 0xAE5D3934,
    Func20862C10 = 0x278B9DC0,
    FuncE0762C10 = 0x0201F358,
    Func30852C10 = 0x75674F27,
    Func10782C10 = 0x35471427,
    FuncA0892C10 = 0x7C066002,
    Func100B0D10 = 0xF951A4D1,
    FuncB0BE2210 = 0x03D2F7D0,
    FuncC0FB2210 = 0x2926AAAD,
    Func80221110 = 0x07F9B368,
    Func000A0D10 = 0x774AA982,
    Func50170D10 = 0x2DC95125,
    Func90D02810 = 0x7562E947,
    Func60D12810 = 0x988AEA78,
    Func50D22810 = 0x9D772BBA,
    FuncB0BC2810 = 0x843B4F60,
    FuncE03F0B10 = 0xF5579360,
    Func30D22810 = 0x0E24CEEE,
    Func704C0A10 = 0x633252D8,
    Func205F2210 = 0x3805EF7A,
    Func705E2210 = 0x22ED9516,
    Func605C2210 = 0xB47A657E,
    FuncB0592210 = 0xAE921F12,
    FuncC0882810 = 0x271EBE10,
    Func30952810 = 0x1B765642,
    Func808C0C10 = 0xF932E4F1,
    Func80DE0C10 = 0xB0C0A5FD,
    Func70F70C10 = 0x5E4F3B9F,
    FuncE0E22B10 = 0x8061A4B1,
    FuncE0E82B10 = 0xC9175E8D,
    Func60E62B10 = 0xB85DE27C,
    FuncE04D1010 = 0xAD1E4A48,
    Func50540A10 = 0xD1682334,
    FuncB0500A10 = 0xED94E84C,
    Func10AE1710 = 0xDB9ED906,
    Func70B51710 = 0x1B4FF3DF,
    Func60C81710 = 0xC12EB19E,
    Func90CD1710 = 0xF40238EF,
    Func30AD1710 = 0x47D61A57,
    FuncA0AD1710 = 0x0FFB0DE1,
    Func20BB1710 = 0x0D1F035D,
    Func50C11710 = 0xD6B6D3E4,
    FuncD0C61710 = 0xB2F30BA0,
    FuncC0021810 = 0x48E0847D,
    Func10E01710 = 0x67F31384,
    FuncC0EE1710 = 0x31B7A4CD,
    FuncD0D81710 = 0x8B3E7343,
    Func40FB1710 = 0xAFFC2279,
    Func10DB1610 = 0xA4DFD3F2,
    FuncE0DD1610 = 0xEDCF624E,
    Func60BF1610 = 0x34206D86,
    FuncD0C31610 = 0x70916171,
    Func50CF1610 = 0xAD95F5ED,
    Func30041710 = 0xBF739FFF,
    Func70051710 = 0x76BFA16B,
    Func10071810 = 0x50016C78,
    FuncA0331710 = 0x2B4DC430,
    Func301A1710 = 0x391EAA21,
    Func501E1710 = 0x8E29FC3D,
    Func90651710 = 0x7CAAC987,
    Func005C1710 = 0xF39C1DEF,
    FuncF0571710 = 0x2208533F,
    Func70611710 = 0x5A23E845,
    FuncA0721710 = 0x98003511,
    FuncB0531710 = 0x5C1230B8,
    FuncC0691710 = 0x9910D3E5,
    Func206E1710 = 0xA6774433,
    FuncC0A81710 = 0xDE6902C1,
    Func40121710 = 0x43707558,
    FuncE00B1710 = 0x70DE8252,
    FuncF0071710 = 0xD891BBA8,
    Func30161710 = 0x05952F34,
    Func407B1710 = 0x2DAECAB7,
    Func30771710 = 0xE1825FA8,
    Func502F1710 = 0xF0698FC9,
    Func80A01710 = 0xE65C75B2,
    Func709C1710 = 0xA4E81B74,
    Func90A41710 = 0x03E66FD0,
    FuncF0971710 = 0x0D723474,
    FuncB08E1710 = 0x41B2CA9A,
    Func90881710 = 0x5726C144,
    Func00931710 = 0xA408D0F8,
    FuncB0841710 = 0x7661A544,
    FuncA07F1710 = 0xE0A5F984,
    FuncB04A1710 = 0x75C1F45D,
    Func80461710 = 0x5A3878F8,
    Func104F1710 = 0x907BEE3F,
    Func40421710 = 0x9A1733FB,
    FuncA03D1710 = 0xFCFAFABA,
    Func002B1710 = 0xE1339B20,
    Func10221710 = 0x3DC16F5F,
    Func60261710 = 0x361F4E22,
    Func50FF1610 = 0xD62044B0,
    FuncC0391710 = 0x7D7152C4,
    Func90EE1610 = 0x54924BF5,
    Func90F41610 = 0x83BB8D0B,
    FuncC0E81610 = 0x33AB0353,
    FuncC0F91610 = 0x17695269,
    Func90011110 = 0xC2D8ED17,
    // FuncE0F90F10 = 0xE5AC921F,
    Func00FF0F10 = 0xD9930B07,
    Func90F30F10 = 0x48B3EA59,
    Func00EC1210 = 0x34EF9506,
    Func40FC0F10 = 0x264C5763,
    Func10F70F10 = 0xFB9BC2AB,
    FuncA0C81210 = 0x0C228297,
    Func50F00F10 = 0x48E085A8,
    Func60C51210 = 0x070D413B,
    Func50E81210 = 0x5018ED61,
    FuncC0E11210 = 0xEE1370CF,
    Func20EF0F10 = 0xF1D2777B,
    Func90E41210 = 0xADD604D1,
    Func70F11210 = 0xAEA3FA32,
    Func50F51210 = 0x8EFC0978,
    Func50E71210 = 0x1890E8DA,
    Func70E71210 = 0x5380AD1A,
    FuncE0CC1210 = 0x6533EA3E,
    Func30030C10 = 0xE083A103,
    FuncC04E1110 = 0x77C71D7C,
    Func90911110 = 0xADA3EF17,
    Func906B1110 = 0xE0B1DCE9,
    Func80CF1010 = 0x5D857A00,
    Func90A91110 = 0xD8CBF37B,
    Func80871110 = 0x63E2F56F,
    FuncB0881110 = 0x0BE17923,
    Func00471210 = 0x2EB3C140,
    Func804D1110 = 0x86F05D7A,
    Func40211110 = 0x329D77CD,
    Func80D21010 = 0x92EA3D02,
    FuncC0EB1010 = 0x7DBE90AB,
    Func90991110 = 0xED74AF30,
    Func70D01110 = 0xBECE67DE,
    Func60981110 = 0x4A35DF54,
    Func10741110 = 0xEB7AF173,
    Func30A41110 = 0x4E2F76A8,
    FuncF0A11110 = 0xAE5FBCFE,
    FuncD0A21110 = 0xB6D62591,
    Func30F81010 = 0xC7026A87,
    FuncA0A81010 = 0xE76ADA52,
    Func004B1010 = 0x7D554F8E,
    Func100C1110 = 0x11FBD838,
    FuncB0881010 = 0x1730BFC9,
    Func208E1010 = 0x0680DE09,
    FuncD0881010 = 0xA3EA6F1D,
    Func00861010 = 0x0078DBA2,
    Func60461010 = 0x785210A2,
    FuncA08C1010 = 0xCF8CAF39,
    FuncC08F1010 = 0x96043CC7,
    Func308D1010 = 0x62FB1592,
    FuncE08F1010 = 0xB7476D15,
    Func30971110 = 0xBAAABFCC,
    Func60401010 = 0xE3E89B6F,
    Func90B61010 = 0x089A8E25,
    Func20B71010 = 0xD0C1DE0D,
    Func90AE1110 = 0x90BB9B56,
    FuncA0971210 = 0xD3E262E1,
    Func40741210 = 0xE83D6456,
    FuncA0741210 = 0xB8416FFA,
    Func009E1110 = 0x35B5FD2F,
    Func60311110 = 0x40A505E4,
    FuncC0A61010 = 0xD2277E3A,
    Func20C91010 = 0x36CFF969,
    FuncD0A61210 = 0x34C9C2D4,
    FuncB0971010 = 0xC78FB6AD,
    FuncE0891110 = 0xD988F0F3,
    FuncF0D71010 = 0xCEEE8E9F,
    FuncD0481110 = 0x2DDFB66E,
    FuncE0F31010 = 0xC33BAEB1,
    Func307A1010 = 0x1BB18724,
    Func30721010 = 0x1BE0B8E5,
    Func30761010 = 0x2A0A350F,
    FuncF03E1110 = 0xA96BDDF9,
    FuncF00E1110 = 0x39C003A8,
    Func60071110 = 0xE4715417,
    Func80C31110 = 0xACC3DA0A,
    Func50C01110 = 0x2D43FB31,
    Func10691010 = 0x7AF170CD,
    Func80C11110 = 0xBCA92AD5,
    Func20BF1110 = 0xE1D5DABA,
    Func20BA1110 = 0xFC13EE11,
    FuncC0C41110 = 0x8D3AC6B9,
    Func00551110 = 0xE515D18A,
    Func901B1110 = 0xB7AB19B9,
    Func80CA1110 = 0xA561FD7D,
    FuncF03B1010 = 0x6E042794,
    Func209B1010 = 0xC74925A0,
    FuncB09C1010 = 0xD048C3B1,
    Func10641210 = 0x3F28E1B9,
    FuncB0621210 = 0x3BD32008,
    Func103A1110 = 0xE3795199,
    FuncB06E1010 = 0x9D6A8A69,
    FuncF09D1010 = 0x2D4B650C,
    Func70071010 = 0x8456FF3D,
    Func20051010 = 0x521566BB,
    Func10D11010 = 0x524B9773,
    Func80F50C10 = 0x387B2E41,
    Func20F30C10 = 0xED9E8057,
    FuncE0511110 = 0x46FBEB03,
    Func70CB1110 = 0x5A04B644,
    FuncD05F1010 = 0xE4B701E3,
    Func405D1110 = 0xE332FA47,
    Func20CD2810 = 0xDEE047AB,
    Func10D02810 = 0xD4F3944C,
    Func10861110 = 0x14B83A5F,
    Func70611010 = 0x22D54523,
    Func20EC1110 = 0xA4218928,
    FuncD0641110 = 0x57F7CAAC,
    Func80681110 = 0x42AEA16A,
    FuncA0631110 = 0x51CCDB2A,
    Func70621110 = 0x7975C581,
    Func20C71010 = 0x11104158,
    Func40611110 = 0x17073A3C,
    Func70551010 = 0xD8265D24,
    FuncD0BE1010 = 0x25F17421,
    Func50751110 = 0x32E1D697,
    FuncB0FE1010 = 0xF91E777B,
    Func90B71210 = 0x11A04CB1,
    Func00A91210 = 0xF4233AC1,
    Func10B21210 = 0x2BCD70FE,
    FuncE0C81010 = 0xADF5D0DB,
    FuncB0681210 = 0xDF0DFCDD,
    FuncA0AA1010 = 0x932AC8FB,
    Func807D1010 = 0x8159E87A,
    Func80571210 = 0xFCABD23A,
    FuncC0D12210 = 0x41BE3CF9,
    FuncE0FB1210 = 0x5DFAB48A,
    Func80FF1210 = 0x2FDE12C5,
    FuncE0021310 = 0xE812EB07,
    Func80041310 = 0x283AC65A,
    FuncC0001310 = 0x4D7B0709,
    FuncB0011310 = 0xDD8CF250,
    Func70D41110 = 0x5E4B36C3,
    Func20071310 = 0xB4B26B65,
    FuncB0FD1210 = 0x79AD0307,
    Func80B11110 = 0xE35FB751,
    FuncF0DF1210 = 0x15658BE6,
    Func300D1310 = 0x25201F3D,
    FuncB0501110 = 0xA81F8992,
    FuncE0440A10 = 0x64F7D53C,
    FuncE0400A10 = 0x21E2CF70,
    Func70400A10 = 0x96370089,
    Func00CE1210 = 0x6A8937C6,
    Func10350A10 = 0x6B8809B4,
    Func10D01210 = 0xD8D37032,
    Func30390A10 = 0x3079AC59,
    Func20491010 = 0x4DB019E6,
    FuncA0E42210 = 0x8A50F126,
    FuncC0251310 = 0xF409D5E5,
    FuncD0F81210 = 0x813D89A8,
    FuncB0D11110 = 0x76A70E8D,
    FuncC0051310 = 0x3F2C5B97,
    FuncA0C11210 = 0x6C1F3FE4,
    Func10C01210 = 0x004537DF,
    Func40BC1210 = 0x28BF0A63,
    Func40D52810 = 0xF0B18453,
    Func50D32810 = 0x578B6382,
    Func50D42810 = 0x8AE4B4CA,
    FuncB0D32810 = 0x3AB6A38A,
    FuncA0D42810 = 0xB7FA5440,
    Func40D72810 = 0x6AE878A4,
    FuncF0D62810 = 0x8682711B,
    Func20D92810 = 0xA5B31EB8,
    Func90D72810 = 0x74AD6BF2,
    FuncE0DB1110 = 0x48EC6E45,
    Func80E21110 = 0x83EF3A6D,
    FuncB0261110 = 0x638CD19C,
    Func30241110 = 0xC96C4920,
    FuncA0990C10 = 0x2FCCF579,
    Func00640D10 = 0xBD669B00,
    Func90510B10 = 0x6090C927,
    Func007C0D10 = 0xA2A9F4AD,
    Func507E0D10 = 0xCA193154,
    Func406A0D10 = 0x38913465,
    FuncD06D0D10 = 0x408C2FAA,
    Func00151210 = 0x65B1C5F5,
    FuncA0161210 = 0x655DCD32,
    Func80291110 = 0x857186DD,
    FuncB0341010 = 0xFAB69565,
    Func40361010 = 0xF5E10439,
    Func90371010 = 0xF3B11E68,
    Func30FC1010 = 0xF089EEF5,
    Func50D71210 = 0x625D3B94,
    Func40391010 = 0xB82C1F09,
    Func102F1110 = 0x6A9C55FC,
    FuncB0FA2210 = 0xD8BF768C,
    FuncE03B2310 = 0x680649D7,
    Func20951110 = 0x944FC548,
    Func10271310 = 0x0A8064F9,
    FuncD0CB1210 = 0x25EEB2C4,
    Func200D1010 = 0x5786CC6E,
    FuncE0E00F10 = 0x36E39E6B,
    Func309F1010 = 0x1AAD16B4,
    Func70651210 = 0x568A2292,
    Func00671210 = 0xD81420BC,
    FuncE0A31010 = 0xF7FBCA11,
    // FuncD09A1110 = 0x5F608315,
    Func100D1010 = 0xE7BED620,
    Func000D1010 = 0xA109A44B,
    Func502F1210 = 0x086418CD,
    Func70351210 = 0xC2AB14FD,
    FuncD0C12210 = 0x7F8CC5C2,
    Func70592310 = 0xE2ED2123,
    FuncA0AB2210 = 0x540EE82E,
    Func70B42210 = 0x9723D3A2,
    Func409E2210 = 0xB16DC1A6,
    FuncE0BA2210 = 0x68888EB4,
    Func80B12210 = 0x71913023,
    Func60AE2210 = 0x583113ED,
    Func80B72210 = 0xC07E210F,
    FuncC09A2210 = 0xC74BFB78,
    Func10972210 = 0x7F0031AC,
    FuncC0A42210 = 0x271C1109,
    Func30A82210 = 0xECE69BCE,
    FuncF0A12210 = 0x7A2D309E,
    FuncA0B12210 = 0xE262027C,
    Func50BB2210 = 0xAF88030F,
    FuncD0B41010 = 0xCA1DDAF3,
    FuncA0B21010 = 0xC71F85A6,
    Func30B31010 = 0xEA724B87,
    Func604A1210 = 0xC02EEC20,
    Func40B11010 = 0x77A796F3,
    Func80711210 = 0x1CF639D9,
    FuncB0EA1110 = 0x3DBA65B9,
    FuncF0EB0F10 = 0xD875B6C5,
    Func10201110 = 0xC307636C,
    Func901D1210 = 0xB7BCF50D,
    Func903B1210 = 0x8413DDF6,
    Func006D1110 = 0x32464C6C,
    FuncD0651010 = 0x052D0709,
    FuncE0451210 = 0x80B1ABB9,
    Func00891210 = 0xA57457A4,
    Func30811110 = 0xE81CE836,
    Func00901210 = 0xB34BAB4F,
    FuncA0831110 = 0x6F5435AF,
    Func50841210 = 0xF898247D,
    FuncE0781110 = 0x58FE51E6,
    FuncD07B1110 = 0x6A9F5B63,
    FuncB07D1110 = 0xE2E1E6F0,
    FuncC0431010 = 0x0FF07FDE,
    FuncE0C42210 = 0x80EBC01F,
    FuncA0CC1110 = 0x44E022A9,
    FuncB0401210 = 0xE9B009B9,
    FuncC0181110 = 0x842B066E,
    Func103D1210 = 0x4535903A,
    Func60DA1010 = 0xC118ED82,
    Func20311010 = 0xD387D414,
    Func002E1010 = 0x55590CB2,
    Func70E61010 = 0xF6F0454E,
    FuncC0011010 = 0xD6979D33,
    Func20451110 = 0xD662113A,
    Func90801210 = 0xA104AD45,
    Func10A61110 = 0x8C294330,
    Func10821010 = 0x8F01B624,
    Func005F1210 = 0xBA52ED4C,
    FuncA0081110 = 0x3526D9AA,
    FuncF02A1110 = 0xAC80BEFD,
    Func80761210 = 0x25561A09,
    Func70B61110 = 0x8C3A58C3,
    FuncC0210A10 = 0x8011C22C,
    Func606A1110 = 0xFDC129FA,
    Func508C1110 = 0x15CC33B4,
    FuncD0131110 = 0x3FC596AA,
    Func20161010 = 0xD2294406,
    Func60121010 = 0x0188FFF8,
    Func80F21110 = 0x4A0E1ABC,
    FuncC0FE1110 = 0x1E284692,
    FuncA0FA1110 = 0xBEF1119D,
    Func800B1210 = 0xC72A38E3,
    Func40031210 = 0xADE26F6C,
    FuncF0101210 = 0xBCC45DE1,
    Func70071210 = 0xDA6AB68B,
    FuncB0F61110 = 0x4B698CDD,
    FuncA0D81110 = 0x381D2090,
    Func500F1010 = 0x48924D31,
    FuncB0BB1010 = 0xF0A9AEEB,
    FuncB0B71010 = 0xD8A72CE5,
    Func00C41010 = 0x5CC38844,
    Func00C01010 = 0x1064B0E1,
    Func60561110 = 0xD22428E1,
    Func80281010 = 0x57C9F781,
    FuncC0251010 = 0x0518F782,
    Func402B1010 = 0x8D1A4910,
    Func00231010 = 0xA8EFEF61,
    FuncF0EC1010 = 0xAFD1B02C,
    FuncD0091010 = 0x92A5A273,
    Func203D1010 = 0xEB98C42F,
    FuncD04B1210 = 0xD7F02C7D,
    Func70361110 = 0x141681E5,
    Func50B31110 = 0x0F2400AB,
    FuncC0AA1110 = 0xF9BCB37F,
    Func70711110 = 0x61C2C2AA,
    Func201C1A10 = 0x7BC207F8,
    FuncC0981810 = 0x5D7CCAEB,
    Func70861810 = 0x1EA54A3B,
    Func90141A10 = 0x07BCF4AC,
    FuncF0A11810 = 0x27F059B5,
    Func90291910 = 0x7E237D59,
    Func90D71910 = 0x3F475F9B,
    Func10C91910 = 0x87BD35EF,
    FuncE0CB1910 = 0xFCBDF642,
    Func20C61910 = 0xED2BEA09,
    Func00CF1910 = 0xC9E9BB33,
    FuncF0A41910 = 0x409D9841,
    Func00A91910 = 0x3D358A0C,
    FuncD01D1A10 = 0x4491E797,
    FuncD0981810 = 0x24245BEF,
    FuncC01F1A10 = 0xFA524578,
    Func50951810 = 0xC68C3E8D,
    Func90C01810 = 0x8AA0E961,
    Func40D21910 = 0x0B277A29,
    Func30E91810 = 0xB3935CC2,
    Func90DD1810 = 0x9CD57B5F,
    Func00041910 = 0xA0BD930D,
    FuncA0E41810 = 0x1F7BC2B4,
    Func30EF1810 = 0x547F2BB0,
    Func90D41810 = 0xF8D1A3BF,
    Func60F91810 = 0xDC13F285,
    FuncB0F31810 = 0xB16235C5,
    Func10D91810 = 0xF91F7F9B,
    Func20FE1810 = 0xDFA1B288,
    Func909A1810 = 0x39EFDE5E,
    FuncD09C1810 = 0x9BE35455,
    Func701C1A10 = 0x75DD3E6A,
    Func30131A10 = 0xFE0E5187,
    Func30851810 = 0x77D8F573,
    FuncC00F1910 = 0xE63AE22B,
    FuncF0131910 = 0xEFCEDD1F,
    FuncA0C51810 = 0xE440B867,
    Func60CE1810 = 0x39442CFB,
    Func40201910 = 0x32CA4983,
    FuncB0901810 = 0x7F7F4600,
    Func10921810 = 0xC2EBA427,
    Func40D71910 = 0xF0939208,
    Func10AD1810 = 0x55590BDB,
    Func50A61810 = 0x139C77F6,
    FuncE0B91810 = 0x375E26CC,
    FuncC0B11810 = 0x674D172F,
    Func00951910 = 0x4D2C0A9C,
    Func309A1910 = 0x0B62B9E2,
    FuncD08F1910 = 0xA59BE705,
    FuncD09F1910 = 0x8159B63F,
    FuncD0071A10 = 0x6D932EC7,
    Func60021A10 = 0x4150FF5C,
    Func800D1A10 = 0x6592AE66,
    Func30F31910 = 0xB9DA41D6,
    Func10EE1910 = 0x5D387298,
    Func70F81910 = 0x79FA23A2,
    Func30E31910 = 0x8D49471C,
    FuncD0DD1910 = 0x4C75C9FE,
    Func60E81910 = 0x68B798C4,
    FuncE00A1910 = 0x614C2D7F,
    FuncD0FD1910 = 0x3D1B9E83,
    FuncF0661910 = 0xA84DE4CB,
    Func906C1910 = 0x39050045,
    FuncA0611910 = 0x1F9216FB,
    Func20721910 = 0x3B5047C1,
    Func007D1910 = 0xAFF54A75,
    FuncB0831910 = 0x3B421EF9,
    FuncB0771910 = 0x510E9195,
    Func408A1910 = 0x75CCC0AF,
    Func105C1910 = 0x484F6825,
    Func40321910 = 0x153DE751,
    FuncE0371910 = 0x7520CB28,
    FuncD02C1910 = 0x3BD390E8,
    Func50401910 = 0x1F11C1D2,
    Func604B1910 = 0x1CAC3865,
    Func20511910 = 0xD3996F8F,
    Func10461910 = 0x69DE2C54,
    Func80561910 = 0x4D1C7D6E,
    FuncA0B41910 = 0x7B30AE0D,
    FuncC0BA1910 = 0x03CAEB65,
    Func60AE1910 = 0x2BC18DBD,
    Func60C01910 = 0x0F03DC87,
    Func40631310 = 0x58337FA3,
    Func40731310 = 0xDC2BD4A6,
    Func50641310 = 0xA91F88EB,
    Func60691310 = 0x28766157,
    Func706D1310 = 0xC16C7E2C,
    Func10701310 = 0x7D656244,
    Func90701310 = 0x1785B492,
    Func60651310 = 0x717648FD,
    Func90741310 = 0x9C4BB8D0,
    FuncF0A01310 = 0x2C73AFDC,
    FuncF0A51310 = 0x5D0634EE,
    FuncE09B1310 = 0xA3070DB0,
    FuncE0AA1310 = 0x87C55C8A,
    FuncB07C1310 = 0xA38ACF9D,
    Func00781310 = 0x02533065,
    FuncB0821310 = 0x2691615F,
    Func308C1310 = 0x00D57B3B,
    Func40911310 = 0x8D877B8F,
    Func80871310 = 0x33D32759,
    FuncD0961310 = 0x17117663,
    Func405A1310 = 0x465F9BCF,
    Func80561310 = 0x9DF23CA1,
    Func605E1310 = 0xB9306D9B,
    FuncF0CA1310 = 0xA69F8E29,
    FuncE0DA1310 = 0x3B0D30DF,
    Func00EA1310 = 0x825DDF13,
    FuncA0DF1310 = 0xBA94C56E,
    FuncC0DF1310 = 0x843C0256,
    Func80F31310 = 0xCDF27911,
    Func70CB1310 = 0x6FF81213,
    Func60EE1310 = 0x0F4DAE6B,
    FuncE0D31310 = 0xC5DDF56E,
    FuncF0250E10 = 0x4C0B519A,
    Func30E61310 = 0x025BFB10,
    Func90E61310 = 0xE7B1198D,
    FuncE0C81310 = 0x4AF0011D,
    Func30C51310 = 0x9962C97C,
    FuncC0BD1310 = 0x927DA4F6,
    Func30C71310 = 0x88C82104,
    Func40E81310 = 0xFDFC7D49,
    Func70BC1310 = 0xB23B70EE,
    Func20BB1310 = 0xFA579A0F,
    // Func60C01310 = 0x189A1FDF,
    FuncB0C31310 = 0x60DED2ED,
    Func003B1410 = 0xE3640A56,
    FuncB04E1410 = 0x1B71D425,
    FuncC0431410 = 0x6683EE65,
    FuncE04D1410 = 0x8CD42541,
    FuncF0491410 = 0x95E71AB6,
    Func903F1410 = 0xAF97FE75,
    FuncC0831410 = 0x2F69F8E5,
    Func90891410 = 0x1B4F669B,
    FuncF07D1410 = 0xC4554575,
    Func308F1410 = 0xE097144F,
    Func20211410 = 0x0D258BB5,
    Func20251410 = 0xE9C425A1,
    Func10301410 = 0x34C0B13D,
    FuncB0461410 = 0xC729203C,
    FuncB0631410 = 0x6FF0350C,
    FuncC0551410 = 0x0BC8163D,
    Func405B1410 = 0x65FE3AAD,
    FuncC0511410 = 0xA933CE98,
    Func505F1410 = 0x8DF19FA2,
    Func006D1410 = 0xB2C9D666,
    FuncB0711410 = 0x4B4BD039,
    Func70761410 = 0x14277C24,
    FuncF0791410 = 0xCBC9361B,
    Func90681410 = 0x661AA3AF,
    FuncD0381410 = 0xD2488B79,
    // Func60161510 = 0xDA141340,
    // Func902A1510 = 0x891FA0AE,
    Func20281510 = 0x8F6ED0FB,
    FuncA0121510 = 0x0518A32C,
    FuncE02D1510 = 0x987947CD,
    Func90241510 = 0xD8C4FE63,
    Func401F1510 = 0xC3ADAB77,
    Func90301510 = 0xB699F73A,
    Func40EA1410 = 0x65CE5BFC,
    Func30EF1410 = 0x3CC2D181,
    Func30E51410 = 0xCF86B990,
    FuncE0F31410 = 0xEB44E8AA,
    Func10FF1410 = 0x76A38D54,
    FuncA0031510 = 0x15B85505,
    Func10FA1410 = 0x0FE87B7F,
    Func00081510 = 0x2B2A2A45,
    Func200E1510 = 0x98A4411A,
    Func50D21410 = 0x52B76D12,
    FuncA0D51410 = 0xCF6CEF26,
    FuncF0CA1410 = 0xE543C540,
    Func00DD1410 = 0xC181947A,
    // FuncC0B01410 = 0xFB85B01E,
    // Func90B71410 = 0x35AED5E8,
    // FuncF0A71410 = 0x814B209F,
    // Func70C01410 = 0xA58971A5,
    FuncD0211510 = 0xFD871348,
    Func401C1510 = 0xBD71F0C9,
    FuncB0721610 = 0x1BD69F49,
    Func90701610 = 0xDCB616C3,
    Func30220E10 = 0x1B46D4CC,
    Func70801610 = 0x6F151055,
    Func40831610 = 0x1AB0724B,
    Func40501610 = 0xFB8F61EC,
    Func507A1610 = 0x66AF10B7,
    Func907B1610 = 0xBED4FF0B,
    FuncC0851610 = 0x5AC7F8E5,
    FuncA0C21510 = 0x57B5A5DF,
    FuncD0AC1510 = 0x40BDDB36,
    FuncD0B11510 = 0x1391CFD6,
    Func90B71510 = 0xF58938F5,
    FuncB0CA1510 = 0xD14B69CF,
    FuncB0F11510 = 0xFACEB39B,
    Func40F91510 = 0xFBFFAF22,
    Func00EB1510 = 0xB135DA0C,
    Func60FE1510 = 0x95F78B36,
    Func20D01510 = 0x5439F0B7,
    FuncA0261610 = 0x5A769461,
    FuncB02D1610 = 0xE51C215A,
    FuncA01F1610 = 0x2224D976,
    FuncB0321610 = 0x06E6884C,
    Func900B1610 = 0x8895B510,
    FuncA0111610 = 0x7FEE9032,
    Func10051610 = 0xDA025C3E,
    FuncD0181610 = 0xFEC00D04,
    Func70731510 = 0x68789E2A,
    FuncF06C1510 = 0x0C1EF2CA,
    FuncE0811510 = 0x28DCA3F0,
    Func005B1610 = 0x2BC9F805,
    FuncD07B1510 = 0x43D9B26A,
    FuncC0621610 = 0xAFA4113C,
    Func40551610 = 0x811819D7,
    FuncA06A1610 = 0xA5DA48ED,
    Func20BD1510 = 0xD2FC1B34,
    Func80D51510 = 0x58F4F4C1,
    Func70DB1510 = 0x45C064D5,
    Func50E01510 = 0xFD7C0AC3,
    FuncA0E51510 = 0xD9BE5BF9,
    Func90391610 = 0xEC6FCD0B,
    Func503F1610 = 0x8506C02E,
    Func10451610 = 0xDD41633C,
    FuncB04A1610 = 0xF9833206,
    FuncA08A1510 = 0x64B43A6A,
    Func40981510 = 0x507B4B59,
    Func909D1510 = 0x21537AD4,
    Func50901510 = 0x23F1B133,
    Func30A51510 = 0x0733E009,
    Func20771610 = 0xC4733F19,
    FuncB0741A10 = 0xA629DA31,
    Func90491A10 = 0x9A1B9365,
    FuncE0771A10 = 0x0254A187,
    Func70511A10 = 0x92D70A37,
    Func10561A10 = 0xADFB3AC2,
    FuncC04C1A10 = 0x89396BF8,
    Func50631A10 = 0x8B773228,
    Func605C1A10 = 0xD4BB05A1,
    Func30681A10 = 0xF079549B,
    FuncC02F1A10 = 0xD4100E58,
    Func402B1A10 = 0x73C01D58,
    Func90331A10 = 0x57024C62,
    FuncE03E1A10 = 0x4B81241B,
    Func60371A10 = 0x3DBF5764,
    Func10431A10 = 0x197D065E,
    FuncC0911A10 = 0xDDA13F96,
    Func608C1A10 = 0x3C33FCEA,
    Func00871A10 = 0xCC86D85C,
    Func008B2510 = 0x84244524,
    Func308D2510 = 0xCB7B09D2,
    Func10382310 = 0x80A5CD5D,
    Func80882510 = 0x0E7AB7E5,
    FuncB08F2510 = 0x9BE979DC,
    Func30882510 = 0x7989A457,
    Func40D92610 = 0xE6DBEA69,
    Func70DB2610 = 0xDE1F9B45,
    Func30E50C10 = 0x9ABDD40D,
    FuncA0E70C10 = 0x20DE9260,
    FuncE0450B10 = 0x63F9799E,
    FuncF0FE0C10 = 0x35C29134,
    FuncB0BB0B10 = 0xA70503B2,
    FuncA0000D10 = 0x22A78B05,
    Func00490A10 = 0x4888D790,
    Func30DE0C10 = 0x2863148D,
    FuncA0920C10 = 0xAB163097,
    FuncE03D0D10 = 0x67B5DB55,
    Func00990D10 = 0x3092AC32,
    Func90F70C10 = 0xD995937E,
    Func80F90C10 = 0xC5E31A58,
    Func100F0D10 = 0xC64FF367,
    FuncC0820D10 = 0xFA13E65A,
    Func801A0D10 = 0x6AE16EC3,
    Func30AE0B10 = 0xD2CCF5D6,
    FuncA0550C10 = 0xF9C68DD6,
    Func80DB0B10 = 0x8CF2D19B,
    Func50210D10 = 0x09734F1D,
    Func80910D10 = 0x69C6F365,
    Func60950D10 = 0x67EFD887,
    Func00250D10 = 0x41511594,
    FuncA0260D10 = 0x7FC17574,
    Func60D70C10 = 0x6067AF3F,
    FuncE0920C10 = 0x92F9D80D,
    Func30C40C10 = 0x037FB940,
    Func40C90C10 = 0x84F2A8DF,
    FuncC0D30C10 = 0x64C24AF1,
    FuncF0CD0C10 = 0x351DA224,
    FuncC0C00C10 = 0xDEACDDA5,
    Func90DA0C10 = 0xCC7ED579,
    FuncD0090C10 = 0x3230D69A,
    Func10250C10 = 0x0291BFF2,
    Func60040D10 = 0x4085DE45,
    Func90760D10 = 0x172409B4,
    FuncB0050D10 = 0x0E45002D,
    FuncB0770D10 = 0x4A82C2B1,
    FuncA01E0D10 = 0x95B64341,
    Func708E0D10 = 0xF5A0F22C,
    Func40210D10 = 0x9FB063DF,
    Func70910D10 = 0x3FC9A59C,
    Func202F0D10 = 0x5757474A,
    Func40990D10 = 0xCA36A3AB,
    Func302F0D10 = 0x6DFD1C8C,
    Func50990D10 = 0xAED02700,
    Func70140D10 = 0x6BB1EE5D,
    Func30850D10 = 0x57D9060F,
    FuncD0D92810 = 0xB8249127,
    Func20D32810 = 0x7EB95503,
    Func30170D10 = 0xDC27D5D4,
    Func00380D10 = 0xAFC4833E,
    Func20040C10 = 0x175167E9,
    Func50EC0B10 = 0x3B05C7E1,
    Func50EF0B10 = 0x6AE4CFB5,
    Func40E20C10 = 0x42892957,
    Func30B80D10 = 0xBF6C1762,
    Func60710D10 = 0x854BA405,
    Func70850C10 = 0xE7CB998D,
    FuncD0730D10 = 0xA9062C78,
    Func40A90B10 = 0xA2072D59,
    FuncE0710C10 = 0x1F7DB630,
    FuncE0820B10 = 0x552E5B9B,
    Func403D0C10 = 0x49882876,
    Func40320C10 = 0xCBBD40F0,
    Func70660D10 = 0x61D7B624,
    FuncE0490C10 = 0xE6D328CC,
    FuncB0C10B10 = 0x91B594B3,
    FuncF0E90C10 = 0x4144111A,
    Func70880C10 = 0xF98854C8,
    Func109C0D10 = 0x3EFADA1D,
    Func809C0B10 = 0xF8A3A0A1,
    FuncB0880B10 = 0x1123ACB1,
    Func20A72710 = 0x69CCCD08,
    Func20BC2710 = 0xF183FFEA,
    Func70852710 = 0x337BC36B,
    Func60AA2710 = 0x7F5CF74D,
    Func500C0D10 = 0x8E985CCD,
    FuncF07F0D10 = 0xF36A668D,
    FuncB00D0D10 = 0x0F5F4D01,
    Func10520D10 = 0xD6B99D89,
    FuncE0590D10 = 0xDBBC0AF4,
    Func502E0D10 = 0x66FB7FC0,
    Func702E0D10 = 0xB68F3440,
    Func50AE0D10 = 0x45AEA29B,
    Func00170C10 = 0x005850E9,
    FuncE08B0D10 = 0x4ECBEA37,
    FuncA0B80C10 = 0x8EB56969,
    FuncC0B40C10 = 0x72C8C3D5,
    FuncC0AC0C10 = 0x05AE7FAA,
    Func90A80C10 = 0xABF292F1,
    FuncA0B00C10 = 0xB2EB2C66,
    Func70790B10 = 0x595E3EF6,
    Func408C0C10 = 0x1C0F37AB,
    Func908F0C10 = 0x130E96D7,
    Func50900C10 = 0x06A56E20,
    FuncE08E0C10 = 0x5A96D0F4,
    Func601A2910 = 0xBE5C71CB,
    Func701A2910 = 0x8D5CCFCC,
    FuncD01C2910 = 0x872B4463,
    FuncE01C2910 = 0xFB22D656,
    Func901A2910 = 0xE23B68C1,
    FuncA01A2910 = 0x35582435,
    Func801A2910 = 0x106EC09A,
    Func10552910 = 0x1EFC3957,
    FuncC0552910 = 0x15A3E66E,
    FuncC04C2910 = 0x3DCE1577,
    Func405F2910 = 0xD8498827,
    FuncB0512910 = 0x1629A173,
    Func60522910 = 0x019185BE,
    FuncC0622910 = 0x52EB0440,
    Func00642910 = 0xF4C863AC,
    Func00662910 = 0x3E983160,
    Func60532910 = 0x69A9874D,
    Func10542910 = 0x4BAC6D2D,
    FuncE05B2910 = 0xE300109A,
    Func905C2910 = 0x6E973AC5,
    Func205A2910 = 0xCADCB956,
    FuncE05A2910 = 0x9B3E5EE0,
    FuncB0502910 = 0x79232685,
    FuncC0562910 = 0x083629B7,
    Func70572910 = 0x82C48494,
    Func00692910 = 0x708307D6,
    FuncB0692910 = 0xFDA2E0AA,
    Func70582910 = 0x699AB941,
    Func20592910 = 0x65EDD248,
    Func40672910 = 0x88B47F2C,
    Func00682910 = 0x365D878C,
    FuncF01A2910 = 0x91083FF1,
    Func201B2910 = 0xB6B2880B,
    FuncC01A2910 = 0xB5655BCE,
    Func501B2910 = 0x2A62DFC0,
    Func003F0A10 = 0x2DF387AD,
    Func203E0A10 = 0x5C909191,
    FuncD01F0A10 = 0x2F2B5F5A,
    FuncF01B0A10 = 0x46A3DABF,
    FuncB01C2910 = 0x2DA1E50F,
    FuncB01A2910 = 0x38AF5465,
    FuncC01C2910 = 0xDDB1017F,
    FuncA01C2910 = 0x08F90D07,
    Func101C2910 = 0xD28EA837,
    Func901B2910 = 0xF4306524,
    Func501C2910 = 0x1AF3B2B7,
    Func701C2910 = 0x504D9215,
    Func001C2910 = 0x9F30E3D1,
    Func801B2910 = 0xA3580B83,
    Func401C2910 = 0xF698C5E1,
    Func601C2910 = 0x6A04E6AE,
    FuncB01B2910 = 0x49F86AFB,
    Func801C2910 = 0x4B700D2A,
    Func201C2910 = 0x6D9651B6,
    FuncA01B2910 = 0xADDFA99E,
    FuncE01B2910 = 0x5F35BCB5,
    FuncD01B2910 = 0xF4C2F8CC,
    FuncF01B2910 = 0xFA0B9A59,
    FuncC01B2910 = 0x584CB0B6,
    FuncF01C2910 = 0xA3E36F0A,
    Func901C2910 = 0x50F44FEF,
    Func604E0B10 = 0xA0C72EE4,
    Func00F50B10 = 0x0BB06808,
    Func70650C10 = 0xC89D5384,
    Func802A0D10 = 0x8E875CF9,
    Func30F20B10 = 0xF17985ED,
    Func30001110 = 0xD26B8A58,
    Func70BF0C10 = 0xE507DEDA,
    FuncC0E10D10 = 0xD45CDF8B,
    Func10C70B10 = 0xAE457190,
    Func40D40B10 = 0x1E9D8A31,
    FuncF0A60B10 = 0x7C33AB5A,
    FuncC0B50B10 = 0x6B624DB7,
    FuncD0000C10 = 0x34F121B1,
    Func90A40B10 = 0xD9BBDE39,
    Func70B30B10 = 0xED3C8D24,
    Func30A20B10 = 0x67661C03,
    Func10B10B10 = 0x9B0CDDB3,
    FuncF01B1010 = 0x995CD4EB,
    FuncA09F1210 = 0x8534B728,
    Func809C0C10 = 0xEF54E717,
    FuncF06E0B10 = 0xD12ABA03,
    Func80772710 = 0x11ABCCF8,
    Func40AA2710 = 0x5D8CF8DE,
    Func301C2910 = 0x2029698F,
    Func60080C10 = 0x6564435D,
    Func20962710 = 0x68B59B03,
    Func109B2710 = 0x47A4B0D0,
    Func609B2710 = 0xCBFDD500,
    Func50FA0B10 = 0x1A0B9825,
    Func909F2710 = 0xAB3B7419,
    Func90F60B10 = 0x776FC06F,
    Func50C40B10 = 0x63E5D8DB,
    Func804C0C10 = 0x1E17E29B,
    FuncE0D10B10 = 0xF576F5CF,
    Func905D2910 = 0x670ECFEE,
    Func405E2910 = 0x4AC563FE,
    Func10F52810 = 0x61041C24,
    FuncF0EF2810 = 0x47BAD137,
    FuncB0E92810 = 0xBB7F91D9,
    FuncF0F72810 = 0x5F4C2664,
    FuncA0ED2810 = 0x9FA3584D,
    FuncD0690C10 = 0x21C299C8,
    Func000B0C10 = 0x077C54DB,
    Func30460D10 = 0x76E48826,
    FuncC06A0B10 = 0x5216BE47,
    Func007B2710 = 0x96437923,
    Func907E2710 = 0x4575DD94,
    Func607F0B10 = 0xCBD2DB05,
    FuncD0760B10 = 0x6D3A0A28,
    Func904B2710 = 0x40BC7EE3,
    Func20812710 = 0xFAE7855F,
    FuncA0AE2710 = 0x655C5FF5,
    Func40882710 = 0x461F84C1,
    Func20AF2710 = 0x0B396D98,
    FuncC0882710 = 0xBB8052C3,
    Func00650C10 = 0xD0F299A3,
    Func60420C10 = 0x1CE58F7B,
    Func10190C10 = 0x5E14CB10,
    FuncF0D60B10 = 0x212F551F,
    FuncA0350C10 = 0x9A1A4DB8,
    FuncB0390C10 = 0x556911DB,
    FuncE0810C10 = 0xD04FF409,
    Func006B2710 = 0x38EB95D2,
    FuncE05C2710 = 0x1AC2B1E7,
    Func405A2710 = 0x7951E57C,
    Func805F2710 = 0x602F60D8,
    Func40762710 = 0x33649F39,
    Func707D2710 = 0x71607531,
    FuncC04E2710 = 0x2EEBACCC,
    Func00582710 = 0xF64D320F,
    FuncC0552710 = 0xA3F1F373,
    Func30532710 = 0x4FD61B86,
    FuncC0642710 = 0x0D48EE47,
    Func70DF0B10 = 0x1E268952,
    Func00E20B10 = 0xAE9C64F3,
    Func60A40C10 = 0x7ABD6E8B,
    FuncC0A22710 = 0xD60FB01A,
    Func200F0C10 = 0xCAEDD664,
    Func208C0B10 = 0x0286B8ED,
    Func10BE0B10 = 0x7B3BE896,
    FuncC0940B10 = 0xB69E0B55,
    FuncB0900B10 = 0xFA2E1EDD,
    FuncB0980B10 = 0x16555400,
    Func10D00B10 = 0x436CED76,
    Func207C0C10 = 0xE935D9D7,
    Func30540C10 = 0x0A1A174A,
    Func70770C10 = 0x05D3496E,
    Func10942710 = 0xBCA17455,
    Func30B92710 = 0xCBC7C82A,
    Func20B80B10 = 0xB73D1EE9,
    Func50460C10 = 0x3EEBBA1D,
    Func101D0C10 = 0x469921DF,
    Func902E0C10 = 0x2CCC37A0,
    FuncC02A0C10 = 0x26C8AF87,
    Func404F0C10 = 0x73BE7F64,
    FuncC0C70B10 = 0x6050BB05,
    FuncD0CB0B10 = 0x5FDD5772,
    FuncD0200C10 = 0x2F432B2F,
    Func20270C10 = 0xD2762CF4,
    FuncF06D0C10 = 0x0801975B,
    Func80590C10 = 0xB3E0DFE5,
    Func90E40B10 = 0x655B7BDC,
    FuncD0120C10 = 0xEEA80619,
    FuncC0690C10 = 0x7082A053,
    FuncE06E0B10 = 0xB5E8E855,
    FuncC05A2A10 = 0xFDB63C81,
    Func00642A10 = 0x9AFB9DEE,
    Func40682A10 = 0xCB89381D,
    Func70452A10 = 0x989685F0,
    FuncD06D2A10 = 0x9B542831,
    Func80262A10 = 0xEC32944E,
    Func50192A10 = 0x5F1AA66C,
    Func30742A10 = 0x3F113C77,
    Func70352A10 = 0xDA97071E,
    Func50372A10 = 0x2AEA7EE5,
    Func80552A10 = 0x3BEBAE6B,
    FuncE02A2A10 = 0xD58026B9,
    Func20352A10 = 0x933E2B3A,
    Func001C2A10 = 0xA3C55220,
    FuncB02F2A10 = 0xDC6DC8D3,
    Func50242A10 = 0x11C837AD,
    Func006C2A10 = 0x8987054F,
    Func404B2A10 = 0x451D5F7D,
    FuncF0782A10 = 0xD87CBB9C,
    Func403F2A10 = 0x07EBA036,
    FuncA0772B10 = 0x4D959A89,
    FuncF07B2B10 = 0x2053F234,
    FuncD0912B10 = 0x1ECFD263,
    FuncB08D2B10 = 0xCF43903D,
    FuncE0702B10 = 0x78DB97D7,
    Func80632B10 = 0xB033B140,
    Func006D2B10 = 0xDF2887AF,
    Func30212A10 = 0xA4CDE3A4,
    Func504E2A10 = 0x1EE2FE62,
    FuncA07C2A10 = 0x6984421D,
    Func102E0D10 = 0x410B5C25,
    Func20040D10 = 0xF60852BD,
    Func50760D10 = 0xD54B8989,
    FuncF0DD0C10 = 0x74073CC9,
    Func60752B10 = 0xE6480838,
    FuncE0742B10 = 0x83877959,
    Func20752B10 = 0xDFEBCBDF,
    Func109D2510 = 0x32F707A0,
    Func509D2510 = 0x3DF6196C,
    Func209D2510 = 0xBA91F490,
    Func809D2510 = 0x801B5E51,
    Func609D2510 = 0x4DB05311,
    Func309D2510 = 0x5D50BAC8,
    Func709D2510 = 0xE5566F3F,
    Func409D2510 = 0xCBF2D7A2,
    FuncD0D72510 = 0xD9639601,
    FuncA0EE2510 = 0x44A3F1D1,
    Func80E42510 = 0x4562BC38,
    Func200C2610 = 0x60ACDFDD,
    Func00DB2510 = 0x16DE1C6A,
    FuncA0022610 = 0x8BBFF88B,
    FuncD0D32510 = 0x2D11FF51,
    Func70E12510 = 0xF1F5B434,
    Func10DF2510 = 0x70D404EC,
    Func80D22510 = 0xAAFD4EBC,
    Func20F62510 = 0x971C1410,
    FuncD0F12510 = 0xACA805E6,
    Func20152610 = 0x318018A0,
    FuncC0D72510 = 0x9EA851BB,
    FuncB0D72510 = 0x4C7F9E3E,
    Func100C2610 = 0x468ABDD7,
    Func201A2610 = 0xC929DC63,
    Func20212610 = 0x82CB26B7,
    Func30192610 = 0x21821099,
    Func901B2610 = 0x462FC0A0,
    Func30202610 = 0xE140175E,
    Func801C2610 = 0x42205BCB,
    Func10F32510 = 0xE65E001C,
    Func90F42510 = 0xF68EB811,
    Func40182610 = 0x79B85E23,
    FuncD0F02510 = 0x7D2794AB,
    Func90EE2510 = 0xCC40CC37,
    Func10FF2510 = 0xE076F6DF,
    FuncE0D72510 = 0x3FB513DE,
    Func302C1D10 = 0x4B708B54,
    Func40BA1C10 = 0xA064BDFC,
    FuncB0CD1C10 = 0xBB2B17AA,
    FuncC0F41B10 = 0xE5CEAE41,
    FuncB0CB1C10 = 0x22DE03AA,
    FuncD0061C10 = 0x332D3942,
    Func00391D10 = 0xFCEAC864,
    Func407A1D10 = 0x15E50FC9,
    FuncC03D1F10 = 0x4ABA338F,
    Func507C1D10 = 0xC7FB9E5D,
    FuncB03E1F10 = 0xD81FCEE7,
    FuncB0761D10 = 0x93A00243,
    FuncB08A1D10 = 0x6C0ED98C,
    Func00D71C10 = 0x91123D6A,
    Func30261D10 = 0x37E7191C,
    Func30E61C10 = 0x5D19BCA4,
    Func40EE1C10 = 0xC8FF7258,
    Func906A1D10 = 0xE5A9AAE0,
    FuncE06A1D10 = 0x2AC084FA,
    Func306B1D10 = 0xF8B53C69,
    Func906B1D10 = 0xF2A54796,
    FuncE06B1D10 = 0x4ACEEAF7,
    FuncB02D1D10 = 0xA4AD0870,
    Func40E81C10 = 0x64D6C83D,
    Func60E91C10 = 0xF0F4A5E0,
    Func306C1D10 = 0xD44D3C4E,
    Func10FD2710 = 0xA342F682,
    Func80FF2710 = 0x667C2929,
    Func80FE2710 = 0x71329DF3,
    Func60FF2710 = 0x73E0019A,
    Func90022810 = 0xC23DF926,
    FuncD0012810 = 0xF7FF00C1,
    Func00022810 = 0xFC31236C,
    Func70002810 = 0xD2F6C499,
    FuncF0FF2710 = 0xFCB16330,
    FuncD0FF2710 = 0x157E45C4,
    Func50002810 = 0xE99BA7F3,
    Func20002810 = 0x3E2804A2,
    FuncB0FF2710 = 0x13199B3D,
    FuncD02C1C10 = 0x0F2DD3F2,
    Func902A1C10 = 0x6800F5FC,
    Func202E1C10 = 0xC7985ED5,
    FuncB0381C10 = 0x80C9FD3B,
    FuncC03A1C10 = 0x6D6FDAD4,
    FuncB0361C10 = 0x754033F0,
    Func90411C10 = 0xCDE4A28A,
    Func203F1C10 = 0x2AB714AB,
    Func00441C10 = 0xDBC803EC,
    FuncC03C1C10 = 0x12EE68F2,
    Func70C41C10 = 0x18CDF365,
    FuncA0341C10 = 0xD00B8317,
    Func90461C10 = 0x3D7A86BB,
    Func40221C10 = 0x022CAD61,
    Func70241C10 = 0xB380F218,
    Func40261C10 = 0xFC5A155B,
    FuncB02F1C10 = 0x72B19155,
    FuncA00A1C10 = 0xD5E13573,
    Func00EF1B10 = 0x13C7112E,
    FuncC0B11C10 = 0x0F7029C5,
    Func400D1C10 = 0x84C9D553,
    Func800D1C10 = 0xB476BF61,
    Func000D1C10 = 0x89FFD9A3,
    FuncE01F1C10 = 0x3111BED1,
    Func50B21C10 = 0x5CF7F862,
    Func90CE1C10 = 0xB852F4DB,
    Func20C21C10 = 0x2BBDA32E,
    Func60C81C10 = 0x5609B86A,
    Func40311C10 = 0x3D596B93,
    FuncE0B71C10 = 0x1E6634B3,
    FuncB0171C10 = 0x74EE6B3F,
    FuncD0F11B10 = 0x7C20C5BE,
    Func20C61C10 = 0x905F5C27,
    FuncD0651C10 = 0x6317345C,
    FuncE0CB1C10 = 0xC182027E,
    Func20331C10 = 0xA4527BF8,
    Func30CA1C10 = 0xBD4BC56F,
    Func601A1C10 = 0x1DB7C52C,
    Func902C1C10 = 0x694BFF4D,
    Func20C81C10 = 0xBFDC062C,
    Func90B21C10 = 0xDDF5643C,
    Func80D01C10 = 0x9D2509EF,
    FuncC00D1C10 = 0x962B8AF6,
    Func90151C10 = 0x492A6954,
    Func80CB1C10 = 0xAEAECD41,
    Func00091C10 = 0x0B3827C8,
    Func30F81B10 = 0x52417944,
    FuncA07A1C10 = 0x158BC5C3,
    Func207E1C10 = 0xA993C162,
    FuncD0271C10 = 0xADC65D3D,
    FuncA0BE1C10 = 0xCD3E15CD,
    FuncC0671C10 = 0x995C4A80,
    Func50681C10 = 0x11A9BD34,
    FuncB0701C10 = 0x612CDAC5,
    FuncD09A1C10 = 0x2E874F64,
    Func709D1C10 = 0x989D9DDD,
    Func60941C10 = 0x8309A65D,
    FuncA0A01C10 = 0x93AC4616,
    FuncB0AA1C10 = 0x224C1546,
    FuncB0981C10 = 0x2E1889F0,
    FuncF0731C10 = 0x9FC72559,
    Func906E1C10 = 0x501FF971,
    FuncC0841C10 = 0xBD3EB475,
    FuncB0861C10 = 0x1C4DFCF4,
    Func305A1C10 = 0x55255D05,
    Func20201C10 = 0xD504DDA7,
    Func708E1C10 = 0x0523AA9F,
    Func705B1C10 = 0x0AB7C2DC,
    FuncC0581C10 = 0xCFC92C15,
    Func205C1C10 = 0x5FE72F64,
    FuncA0511C10 = 0xBCA31366,
    Func10551C10 = 0x806A72D1,
    Func504D1C10 = 0xDC0BD667,
    FuncA0481C10 = 0x9D0D31AD,
    Func00461D10 = 0xEEAD8305,
    Func00431D10 = 0x544291F6,
    FuncA0411D10 = 0x8F58E920,
    Func60441D10 = 0xC193E62D,
    FuncC0481D10 = 0x1843A7A0,
    Func60471D10 = 0x8307D18D,
    Func501D1C10 = 0x0FFFB6A0,
    Func70801C10 = 0x62050534,
    Func204A1D10 = 0x687E18DB,
    Func50521D10 = 0x68CFA912,
    Func90821C10 = 0x6937C8D1,
    FuncF00C1E10 = 0x11D789DB,
    Func108C1C10 = 0x6C8AF10C,
    Func80891C10 = 0x667BEE91,
    Func70AD1C10 = 0x5AB2DD42,
    Func90FA1B10 = 0xD8070BB3,
    Func40191C10 = 0x02B4C430,
    FuncF0CF1D10 = 0x8AAC133D,
    Func00FB1D10 = 0x73EB9329,
    Func30F61D10 = 0xAE9C2019,
    Func50E31D10 = 0xCAC3CE5D,
    Func20D21D10 = 0x35233210,
    Func40D21D10 = 0xEF303A9D,
    Func20DA1D10 = 0x0E9C5853,
    Func90F71D10 = 0x4EADF5D2,
    Func20EA1D10 = 0x03CEA1DF,
    Func00F01D10 = 0x9ECB5C10,
    Func30DF1D10 = 0x90AB6D32,
    Func50DF1D10 = 0xA8C27FC7,
    Func30EF1D10 = 0xAE6C7FB5,
    Func20ED1D10 = 0x4F0F3028,
    FuncA0E81D10 = 0x1432278C,
    Func00E51D10 = 0x2361FC95,
    FuncD0E61D10 = 0x98DB138C,
    FuncD0D61D10 = 0x5C67A9D6,
    Func60E11B10 = 0x56CD1D16,
    Func20E01B10 = 0x16F62C80,
    Func90E21B10 = 0xBEC02EB1,
    FuncD0FD1D10 = 0x2ACFEA19,
    FuncF0DE1B10 = 0x735D6473,
    Func50FF1D10 = 0xDCE11A11,
    Func20F81D10 = 0x5ABAE412,
    Func20F01D10 = 0xBBC0380C,
    Func50001E10 = 0x76A3261A,
    Func20DB1D10 = 0x250DB928,
    Func80DC1D10 = 0x6670B9E7,
    Func70DF1D10 = 0xAE6AD564,
    Func30F91D10 = 0x1ED3EA3F,
    Func10F11D10 = 0x1A94F5E3,
    Func50F21D10 = 0xAE0ADDF6,
    Func00F51D10 = 0x9200C0B2,
    Func30F31D10 = 0x77646004,
    FuncE0341D10 = 0xB7FBDBFA,
    Func70D81D10 = 0x2DE11D61,
    FuncA0D81D10 = 0x5B803DAF,
    FuncA0DE1D10 = 0x7A62D510,
    Func00F71D10 = 0xDA04A08B,
    FuncD0D81D10 = 0xB99B688A,
    FuncF0F61D10 = 0xDCDA434D,
    FuncE0001E10 = 0x77C9A2D0,
    Func50FC1D10 = 0x864F7810,
    Func70E11D10 = 0xB7F46CF3,
    Func40EA1D10 = 0xC484A232,
    FuncB0EB1D10 = 0xA66BC2F0,
    Func10D91D10 = 0xC716A1B3,
    Func80B51E10 = 0x6A16D3A0,
    FuncC0B51E10 = 0xBB939EE5,
    Func30AF1E10 = 0x07B86467,
    Func50381F10 = 0xC663B7B3,
    Func80352210 = 0xC5F0365E,
    Func70411F10 = 0x8898997D,
    FuncE0F51E10 = 0x1D289E10,
    Func00021F10 = 0xC060CA16,
    FuncE0DE1E10 = 0xE0CAC5C7,
    FuncF0291F10 = 0x6BF6F893,
    FuncE0F11E10 = 0xC8DE469B,
    FuncB0451F10 = 0xE19B2CB0,
    FuncD05A1F10 = 0xD79D304E,
    Func10E01E10 = 0x76101E1F,
    FuncD0F21E10 = 0xDA5B591E,
    FuncC0481F10 = 0x053F62D6,
    FuncC0461F10 = 0x025DD0CA,
    FuncB0581F10 = 0x05F17E9E,
    FuncB0561F10 = 0x0293CC82,
    Func20261F10 = 0x69C2D61E,
    Func302B1F10 = 0x09F22ADF,
    FuncD09F1E10 = 0x0121BDC6,
    Func40F81E10 = 0x8FFB8E26,
    Func803A1F10 = 0x7AAF7A04,
    FuncE0C91B10 = 0x5F68DA40,
    FuncE0CB1B10 = 0x8E90BB9F,
    FuncD0422210 = 0xAC2DFEB5,
    FuncE0442210 = 0x43D867C0,
    FuncB0CD1B10 = 0x0E6482A0,
    Func30281D10 = 0x19BFDCCB,
    FuncE0A61E10 = 0xBA08208A,
    Func10A61E10 = 0x65B93CA8,
    FuncE0F91E10 = 0x2216A357,
    Func60D11E10 = 0xD1747D38,
    Func90031F10 = 0x688C0647,
    Func403A1F10 = 0xC8EA73DC,
    FuncF0111F10 = 0x09D52986,
    FuncE03F1F10 = 0x43F6B55C,
    Func80081F10 = 0x2D27EF9C,
    Func400E1F10 = 0x35BC2BF4,
    Func600A1F10 = 0xF56B90EC,
    Func500C1F10 = 0x99AA6CD7,
    Func30FE1E10 = 0x73A2249A,
    FuncC0FF1E10 = 0x6C6B31BE,
    Func00181F10 = 0x988775C0,
    Func50061F10 = 0x5D273987,
    Func50081F10 = 0x5B40C835,
    FuncE0031F10 = 0x6A6D8127,
    Func80061F10 = 0xE8B1FD8B,
    Func20061F10 = 0xDEB20047,
    FuncB0441F10 = 0x0AEB7668,
    FuncB03C1F10 = 0xBAA94758,
    Func20171F10 = 0xE75BBE39,
    Func10041F10 = 0xD74D35B7,
    FuncF0141F10 = 0x68DFC3CE,
    FuncC0A71E10 = 0x8A6DC5AF,
    Func10431F10 = 0xFCC58660,
    Func10121F10 = 0xC5F5DD69,
    Func80131F10 = 0xD3D58447,
    Func30F71E10 = 0xC667DEE8,
    FuncD0201F10 = 0x1CD8DC33,
    Func801F1F10 = 0x5A87E539,
    Func10221F10 = 0x5D886A04,
    FuncD0241F10 = 0x440AACCB,
    FuncF0221F10 = 0x58045F57,
    Func90F41E10 = 0xC53E7AB5,
    Func60EF2110 = 0x3736F7A9,
    Func800C2210 = 0x3EDA7E38,
    FuncC0ED2110 = 0x8BBAD2B8,
    FuncB0061F10 = 0x57AE9183,
    FuncF07D1D10 = 0xA776E8DB,
    Func10991D10 = 0xA7BEE7AC,
    FuncF03E1D10 = 0x015A2170,
    Func102C1D10 = 0x91BCAF59,
    Func10261D10 = 0x47309CBF,
    FuncF0251D10 = 0x027DADE0,
    FuncD03E1D10 = 0x42CAA922,
    FuncD08D1D10 = 0xDFAB4DC3,
    FuncB03E1D10 = 0xC0D1736D,
    FuncB08D1D10 = 0x70684C36,
    Func80AF1C10 = 0x05650BEB,
    Func80B41C10 = 0x9083E53A,
    FuncF0C01C10 = 0xFA6A0675,
    Func90B51C10 = 0x5995410D,
    FuncB0B61C10 = 0xEBA4D232,
    Func30621C10 = 0x7D44BB54,
    Func90051C10 = 0x9C39C246,
    Func40941D10 = 0x5526CFD1,
    FuncF0E31B10 = 0x03B845A1,
    Func80E51B10 = 0x9152E055,
    Func00ED1B10 = 0xFBBB031A,
    FuncC0E71B10 = 0x9BB9D68F,
    Func40EA1B10 = 0x407F67AA,
    Func60D71B10 = 0x14610CD7,
    Func80CF1B10 = 0x9DE8C729,
    FuncB0741D10 = 0x7922A53C,
    Func805F2210 = 0x2FBCF41B,
    FuncB05F2210 = 0x0E82FAF0,
    Func40602210 = 0x92EBA502,
    FuncD0602210 = 0xB30F2135,
    Func70602210 = 0xEA54E430,
    Func40612210 = 0xA48CCCF4,
    Func60642210 = 0xE68105BB,
    FuncC0632210 = 0x9B5AAB97,
    Func30642210 = 0x32F66FC9,
    Func80632210 = 0x0821E003,
    Func50632210 = 0xC0C3C41F,
    FuncA0612210 = 0xD1556C79,
    FuncB0622210 = 0x0C0CFF15,
    Func70612210 = 0x50794994,
    FuncC0642210 = 0x7DEFCFBA,
    Func70622210 = 0x03CDC2EC,
    Func90642210 = 0xE54E2339,
    Func00612210 = 0x81E3F9B1,
    Func00652210 = 0x8BC13FB2,
    FuncF0632210 = 0x4790186A,
    Func20632210 = 0xE23B5CB6,
    FuncE0612210 = 0x3B49BD5C,
    FuncA0602210 = 0x5AFCEEF7,
    FuncE05F2210 = 0x415747F7,
    FuncE0622210 = 0xDD5C5F1A,
    Func40622210 = 0xC91DF792,
    Func10622210 = 0xAE63B9E0,
    Func10602210 = 0xC8527E9F,
    FuncD0141E10 = 0x473F7828,
    Func80161E10 = 0x9FBAE4EB,
    FuncE0121E10 = 0x3B4719B3,
    Func20141E10 = 0xB2E98AB8,
    Func90161E10 = 0x6126010D,
    Func80131E10 = 0x0FC65236,
    FuncD0D61E10 = 0xDB8D28AF,
    Func40541D10 = 0x6DD888E4,
    Func00D91C10 = 0x341C6C7F,
    Func009D1D10 = 0xD451E834,
    FuncC0CE1E10 = 0xA6E2C73A,
    Func50E21E10 = 0x7886981A,
    Func80A91E10 = 0x106A487E,
    FuncF0C81E10 = 0xB8F79632,
    FuncD0C42110 = 0x24C6A07B,
    FuncD0951D10 = 0xF1F75FCC,
    Func10DE1C10 = 0x93829529,
    Func50351F10 = 0xE6BFEDD6,
    FuncF02E2210 = 0xC24A15BF,
    FuncB04D1F10 = 0xF1A2B9D5,
    Func804E1F10 = 0x9A06EA07,
    Func60AC1E10 = 0xC09EE6BC,
    FuncE04A1F10 = 0xD6839099,
    Func709C1E10 = 0xF1C54FC9,
    Func10BF1E10 = 0x99ED5C1C,
    Func40E71E10 = 0x0BEAA0B2,
    Func70C41E10 = 0xB53CAB00,
    Func00B61E10 = 0xA0D7180D,
    FuncD0D21E10 = 0x4162822B,
    Func00BD1E10 = 0x71AB7C9C,
    Func90BA1E10 = 0x525D43BE,
    Func40301F10 = 0xD77EF2B4,
    FuncD0EB1E10 = 0x3A94E822,
    FuncD0032210 = 0x9531657C,
    FuncE0F82110 = 0xDBB4A15E,
    Func10F82110 = 0xC383C071,
    Func30D52110 = 0x2FC28856,
    Func50E02110 = 0xC2500E4F,
    Func90202210 = 0x032650AF,
    FuncE0E82110 = 0x1CB72BD7,
    Func60CC2110 = 0x2762DEAC,
    Func30382210 = 0xB9333FE9,
    FuncF0E42110 = 0x2C85F101,
    FuncF0DA2110 = 0x5CB397CF,
    FuncD02D2210 = 0x9AA2AABB,
    Func304A2210 = 0xC6017A7D,
    FuncD0C12110 = 0x47F78194,
    FuncF0302210 = 0xB942BAB7,
    FuncB0CF2110 = 0x2A2C79E8,
    FuncE0CF2110 = 0x1DC7261F,
    Func80172210 = 0x5C52BB86,
    FuncE0EA2110 = 0x7FB785BA,
    Func10012210 = 0x80403FC9,
    Func40FF2110 = 0x48F5B2EE,
    Func70B21E10 = 0x0ED98181,
    FuncA0B21E10 = 0xB672BE19,
    Func101A1F10 = 0x427E236D,
    FuncA0F01E10 = 0x01682C86,
    Func40E51E10 = 0x74A497A1,
    FuncE0DC1E10 = 0x65CB431E,
    Func20DA1E10 = 0x89ECA416,
    Func90051F10 = 0x9006FA68,
    Func00101F10 = 0x1819B423,
    Func200F2210 = 0x286ADD77,
    FuncC0D22110 = 0xFD9B0935,
    FuncC0102210 = 0x5A7F41A1,
    Func80122210 = 0x75B8E639,
    Func50F32110 = 0x2C1941B5,
    Func50EC2110 = 0xD10B4C28,
    Func10372210 = 0xAEB4C6B9,
    FuncB0FA1E10 = 0xC7453BA8,
    FuncE0CB1E10 = 0xF505FBA0,
    Func30181F10 = 0xAEC629E9,
    Func50FC1E10 = 0x82236C47,
    Func00F52110 = 0xCD9141D8,
    Func70DD2110 = 0xEB29634B,
    Func40142210 = 0xA4125399,
    FuncA0F62110 = 0xDE24FC3D,
    FuncE0C72110 = 0x027E98AE,
    FuncB0FA2110 = 0xF6305EB5,
    Func10C02110 = 0x82B91B25,
    Func40392210 = 0x00B179EC,
    FuncA03A2210 = 0x70A08E64,
    Func003C2210 = 0xC8590B46,
    Func903D2210 = 0xA829B223,
    Func90162210 = 0x3DFACEC8,
    FuncB0152210 = 0xA47716F8,
    Func80F12110 = 0x8AB10C89,
    FuncB0901C10 = 0xC0D3C8DD,
    Func00771C10 = 0x87A6B934,
    FuncB06B1C10 = 0x62F2FBC5,
    Func30A31C10 = 0x29B60AA8,
    Func90961C10 = 0xC7339EE4,
    FuncE0A61C10 = 0x06DF696D,
    Func103F1D10 = 0xAC00800A,
    FuncD04F1D10 = 0x9C1EED78,
    FuncB04F1D10 = 0xE942B0FF,
    Func20921D10 = 0xE5767A36,
    Func40321D10 = 0xE8A59F97,
    Func40052210 = 0x85EDB738,
    FuncE05A1C10 = 0x1770DF6B,
    Func805F1C10 = 0x3A7A1347,
    Func70591C10 = 0x44018057,
    FuncD05C1C10 = 0xB26ED0A0,
    Func50521C10 = 0xC850EE0B,
    FuncC0551C10 = 0xD557BD64,
    Func004E1C10 = 0x7A1AC6E1,
    Func50491C10 = 0xD5119DD6,
    FuncE0141E10 = 0x52F0C937,
    Func40171E10 = 0xCC6F1BFD,
    Func30141E10 = 0x6D9324CD,
    FuncD0151E10 = 0x71018DAA,
    FuncA0161E10 = 0xCC6275A9,
    Func300F1E10 = 0xD0CBCA7D,
    FuncA0121E10 = 0x9EEAD6E5,
    Func700D1E10 = 0x8EA884C0,
    Func305C2010 = 0xD2D25687,
    FuncB05E2010 = 0x017BE49E,
    Func10582010 = 0xBDB20007,
    FuncB0D31B10 = 0xB8A4CA1C,
    FuncC0D01C10 = 0xC4E4EFDA,
    Func206F1D10 = 0x2523CAB6,
    FuncE0EE1C10 = 0x86BDB518,
    FuncD0F31C10 = 0xC708C006,
    FuncF0181D10 = 0x81CAF891,
    Func40061D10 = 0x8C84A92A,
    Func10121D10 = 0x5ED18DC4,
    FuncA0F61C10 = 0x0F215864,
    FuncB02F1D10 = 0xACE116BC,
    Func401C1D10 = 0x56DF9D51,
    Func80F91C10 = 0x79C3FE22,
    Func30031D10 = 0x70703F49,
    Func60A11D10 = 0xAE9D975B,
    Func809F1D10 = 0x8B5ED062,
    Func20FE1C10 = 0x8C4375DE,
    Func80621D10 = 0xC975C0B1,
    Func30E11C10 = 0x396ACCA7,
    Func30991D10 = 0x0AFDDCF6,
    Func50EA1C10 = 0x02D67589,
    FuncE03A1D10 = 0x48179C2E,
    Func00671D10 = 0x6F5F0A6D,
    FuncF08D1D10 = 0xA39E6E6E,
    Func00252210 = 0x3B03791B,
    FuncF0462210 = 0x83556D87,
    Func405B1D10 = 0xB6E0A41C,
    FuncF0821D10 = 0x8285C8DA,
    FuncD05E1D10 = 0x1482157A,
    FuncD0861D10 = 0x2D7BE86E,
    Func40581D10 = 0xCBF9F4F5,
    Func607F1D10 = 0x06EA4BF4,
    Func10222210 = 0x51235248,
    Func203F2210 = 0xE1FDABA7,
    Func50862010 = 0x2DB27D09,
    Func80892010 = 0x8CECA0EC,
    Func80802010 = 0xB2A1694B,
    Func30792010 = 0x20489F98,
    Func806D1D10 = 0x8C02C4D0,
    FuncC01D1F10 = 0xD4E26BBF,
    Func001C1F10 = 0x59E890F9,
    Func104C1D10 = 0x2AEDE111,
    Func50121E10 = 0xB2EDAA72,
    FuncD0171E10 = 0x1E62257E,
    FuncD0191E10 = 0xEF88F7B9,
    Func90C71B10 = 0x6D67533C,
    Func800A2210 = 0x6EF4D2D1,
    FuncF04C1D10 = 0xF080C99C,
    FuncD09A1E10 = 0xC663BA92,
    Func30931E10 = 0x96161ACB,
    Func90951E10 = 0x1DE221DD,
    Func30BC2110 = 0x8C68F0F1,
    Func00B32110 = 0xB2E3E2A2,
    Func70B52110 = 0x633D88E1,
    FuncC00B1E10 = 0xC83C4D5D,
    FuncE0512210 = 0xF0D978A8,
    Func00192210 = 0xA46022C7,
    FuncD01C2210 = 0xB092B818,
    Func50331F10 = 0xC99F4A67,
    Func502B2210 = 0xF1EA1980,
    Func900F1E10 = 0x52B1499A,
    FuncD0072210 = 0x01E87354,
    FuncF02C1F10 = 0xAE4D73EF,
    Func80372110 = 0x34F7938F,
    Func30272110 = 0x99CA2DFF,
    Func20352110 = 0x1B0C2F83,
    FuncC02B2110 = 0x092442A1,
    FuncA02E2110 = 0xA942373A,
    Func20282210 = 0xADDEF202,
    Func10472110 = 0xCDF7571A,
    FuncC03A2110 = 0xFB583977,
    FuncE0442110 = 0xC0546D17,
    FuncE03F2110 = 0xA291DAA7,
    Func60422110 = 0x02F7AF3C,
    FuncC04D2110 = 0x4780D70B,
    Func204A2110 = 0x5B3B7479,
    Func90991E10 = 0xCBA3F913,
    Func60BA2110 = 0xDBE53CB2,
    Func40971E10 = 0x0BBA25D7,
    FuncE0B72110 = 0x6446BEB8,
    Func10AC2010 = 0x1D29014A,
    Func80022110 = 0x42763D0C,
    FuncC0B02010 = 0x5577FD13,
    Func40062110 = 0xC57921DE,
    FuncA0BD2110 = 0x04A3F3DC,
    Func802A1D10 = 0xE025A372,
    Func308C1D10 = 0xA2CA8BCF,
    Func00232610 = 0x1DC91303,
    Func70232610 = 0x44EE4841,
    FuncB0222610 = 0xD01BD237,
    FuncE0232610 = 0x0E6CE4F1,
    Func00242610 = 0x118D48A3,
    Func10232610 = 0xD34A789B,
    FuncA0232610 = 0x0E4EEC07,
    Func90232610 = 0xA1EC8D74,
    FuncF0222610 = 0x7B0D72A3,
    FuncB0232610 = 0x964BF452,
    Func20232610 = 0x51D53D06,
    FuncC0232610 = 0x2697A8D1,
    Func40232610 = 0x462214A9,
    Func30232610 = 0xB981D935,
    Func60232610 = 0x96BD040E,
    FuncD0232610 = 0xCDE8E1A3,
    FuncF0232610 = 0x6BA2A5D6,
    Func50232610 = 0x7BF0A94D,
    FuncD0222610 = 0xFD7C5557,
    Func80232610 = 0x869534E2,
    FuncE0222610 = 0xEAD72FE4,
    FuncC0222610 = 0x221FA8E8,
    Func90430B10 = 0xFCE33CA6,
    Func40B40D10 = 0xAEABC278,
    FuncA0B10D10 = 0xE949B228,
    Func601E2C10 = 0xBE7692EC,
    FuncC0232C10 = 0xF117B834,
    FuncF0452C10 = 0x24409F48,
    Func30242C10 = 0x49BCEECF,
    Func902A2C10 = 0x239C4545,
    Func90252C10 = 0x2EC50C2B,
    Func30412C10 = 0x348FF8E1,
    Func904F2C10 = 0x86FDA772,
    Func303A2C10 = 0x1EB29590,
    Func50352C10 = 0x296C434D,
    FuncE0302C10 = 0xDFC063B7,
    FuncF0302C10 = 0x5E5F6C12,
    FuncD01E2C10 = 0xAC7E37F4,
    FuncC0242C10 = 0x3A153134,
    Func401C2C10 = 0xF6A1AD68,
    Func00212C10 = 0x2D68DE96,
    Func60402C10 = 0x1FB0BC30,
    Func50302C10 = 0x451F2134,
    Func504C2C10 = 0x5C069FA3,
    Func60232C10 = 0xDA044458,
    FuncC03C2C10 = 0xC9A8ECEC,
    Func102C2C10 = 0x4AB00934,
    Func80462C10 = 0x3DD6B54B,
    Func00232C10 = 0x4C87E317,
    Func603C2C10 = 0xA17DAABE,
    Func902F2C10 = 0xE6839B43,
    FuncF0482C10 = 0x7BE27FA2,
    Func901D2C10 = 0x932CB140,
    Func203D2C10 = 0xC7177702,
    Func30522C10 = 0x0D6C6CD2,
    Func001E2C10 = 0x8B7E99B5,
    FuncD0442C10 = 0x3CD58F89,
    Func80492C10 = 0x6B9B409E,
    Func30452C10 = 0x96EEA9F8,
    Func90482C10 = 0x5E8F0BEC,
    Func002F2C10 = 0xCE653127,
    Func80412C10 = 0x40C8ED5E,
    Func504E2C10 = 0xBDA6F001,
    FuncF04E2C10 = 0xC3007F26,
    FuncB01C2C10 = 0x8C610BDA,
    Func003C2C10 = 0xB30CD1A7,
    Func903B2C10 = 0x315E0EF0,
    FuncC04C2C10 = 0xF5DCFCBA,
    FuncC0382C10 = 0x36F1C736,
    Func70212C10 = 0xED4416C5,
    FuncB02A2C10 = 0x2D495758,
    Func304E2C10 = 0x416C07B3,
    Func204E2C10 = 0x5268716F,
    Func404E2C10 = 0x7923BA0E,
    Func103A2C10 = 0x622FDC87,
    Func003A2C10 = 0x712BAA5B,
    Func203A2C10 = 0x5A60613A,
    Func004A2C10 = 0xA9657F32,
    FuncF0492C10 = 0xBA6109EE,
    Func104A2C10 = 0x912AC28F,
    Func30302C10 = 0xD4974572,
    Func20302C10 = 0xC79333AE,
    Func40302C10 = 0xECD8F8CF,
    Func60472C10 = 0x44F0ECD1,
    Func302D2C10 = 0x624E21C2,
    Func00422C10 = 0x2B04794B,
    Func203E2C10 = 0xBCE88C04,
    FuncB0252C10 = 0xB843694B,
    Func30322C10 = 0x50DA0E87,
    FuncE03D2C10 = 0xD7C9EC09,
    FuncA02C2C10 = 0x72162B35,
    FuncF0462C10 = 0xFBC08FC1,
    Func80D11B10 = 0x1BC21B66,
    Func70091C10 = 0x1A131E09,
    Func204A2C10 = 0x87045EA3,
    FuncF0402C10 = 0xB9FD41C4,
    Func30282C10 = 0x32BCB3CC,
    FuncF0EB0D10 = 0x23B19713,
    FuncA0EA0D10 = 0x357CFB24,
    Func40ED0D10 = 0x2F948148,
    FuncF0CF0D10 = 0x38AC3081,
    FuncA0CE0D10 = 0xFA2F1791,
    Func40D10D10 = 0xE0C76DFD,
    Func90D20D10 = 0xFF8BD545,
    FuncE0D30D10 = 0xE563AF29,
    FuncD0A21D10 = 0x8F947C8B,
    Func30660D10 = 0x3119F36E,
    Func402A0D10 = 0x919B3136,
    Func30D32810 = 0x2040AC5D,
    FuncA0DA2810 = 0x1EAD124C,
    Func40D32810 = 0x5CAC215E,
    FuncC0DA2810 = 0x18A35445,
    FuncB0DA2810 = 0x493584D6,
    FuncD0DA2810 = 0x4306DEAC,
    Func80430D10 = 0xCF00D48E,
    FuncC0440D10 = 0x1003328A,
    Func50F70C10 = 0x6579F1C8,
    Func30760D10 = 0xF8181529,
    FuncC04D0D10 = 0x0B6EF8B9,
    Func10A50D10 = 0x9321CA5B,
    Func704F0D10 = 0x1BB5779A,
    FuncB0500D10 = 0x0CAE9A69,
    FuncF09B1210 = 0xB94B341B,
    Func504C0D10 = 0x1C5659CD,
    Func80A30D10 = 0x054FE75A,
    Func708A0D10 = 0x18919887,
    Func60CD0D10 = 0x97063269,
    Func20CC0D10 = 0x8E1F8CFE,
    Func00CA0D10 = 0x58934E9A,
    Func30F00C10 = 0x5F6D8E71,
    FuncF0C60D10 = 0xE74750E2,
    FuncE0ED0C10 = 0x4821ECD8,
    Func406F0D10 = 0x13F7111E,
    FuncD0C40D10 = 0xEBC7A299,
    Func40410D10 = 0x32789091,
    Func30D50D10 = 0xC5AD6E48,
    Func50DF0D10 = 0x6F83FB5B,
    FuncD0E50D10 = 0x1D5B485B,
    Func30E80D10 = 0xE44BD59D,
    Func50E30D10 = 0xC9116276,
    FuncE03F0D10 = 0x93373C0F,
    Func80D70D10 = 0x155F9182,
    Func60FA0D10 = 0x0C462F15,
    Func50F70D10 = 0x307249D3,
    Func10A11A10 = 0x88330469,
    FuncD0A11A10 = 0xAFC95163,
    Func70A61A10 = 0x47BAC7D9,
    Func10C61A10 = 0xDF1F8F1B,
    Func90BC1A10 = 0x467819D6,
    FuncB0C21A10 = 0x74FE99FF,
    Func20C61A10 = 0x2AFD7DC7,
    Func90BF1A10 = 0xD3B0B765,
    FuncF0C91A10 = 0xECE87388,
    Func805A1010 = 0x4AD30F76,
    Func104F1210 = 0xDD89C278,
    Func801D1110 = 0x05EE23B6,
    Func105C1010 = 0xE4E75871,
    Func10511210 = 0x7CA86A93,
    Func607C2610 = 0x0694D52E,
    FuncC0862610 = 0xDAD9CFF8,
    Func30B12610 = 0x375DBD6B,
    Func50B02610 = 0xA782EA46,
    Func70AF2610 = 0x4E0F2BC0,
    FuncE07D2610 = 0x8FC247B7,
    Func20C22610 = 0xFCBC7E14,
    Func00C42610 = 0x25FD8AE4,
    Func10B22610 = 0xD3EDE889,
    FuncF0C52610 = 0x2BE25DF8,
    Func50C72610 = 0x1267818E,
    Func70B32610 = 0xC63C045B,
    Func807A2610 = 0xCC176068,
    Func60842610 = 0x17093206,
    Func50CA2610 = 0x1C89C5DF,
    FuncD09F2610 = 0x617BFF9F,
    Func60A92610 = 0x61CD6FD6,
    Func80CD2610 = 0x16ABD3A9,
    Func509B2610 = 0x7E4A9A0B,
    Func608F2610 = 0xBC371EE0,
    FuncC0A82610 = 0x1DAE4FBC,
    Func20772610 = 0x4347A9DE,
    FuncE07F2610 = 0xC5EA85A1,
    FuncE07E2610 = 0x2C694BC6,
    FuncD09C2610 = 0xED1F8C69,
    Func80882610 = 0x7FA2173A,
    Func10932610 = 0xEEE566B2,
    Func50CE2610 = 0x577DD202,
    Func90AA2610 = 0x73BF8338,
    Func30912610 = 0xAE3039DA,
    FuncC08A2610 = 0xF020614A,
    FuncD08C2610 = 0x2EC39F90,
    FuncD0AC2610 = 0xCB7309CD,
    FuncD0AD2610 = 0xD61CBE6E,
    Func50852610 = 0xE4A26362,
    Func90B52610 = 0x5927B094,
    Func40B72610 = 0x04357011,
    FuncB0BC2610 = 0xFA5F6134,
    Func80BF2610 = 0x53F0381E,
    Func70912610 = 0xE77470D6,
    FuncF0A02610 = 0x7D067162,
    FuncF0972610 = 0x2F203CCB,
    Func50AF2610 = 0xE5E61F73,
    Func40A42610 = 0x3EDB7FBE,
    Func90A42610 = 0xF58D36AD,
    Func10A22610 = 0x250CBFB2,
    FuncE0C82610 = 0xADE2DADF,
    FuncD09E2610 = 0xDA8466A0,
    FuncF0CE2610 = 0x8A2CF5F5,
    Func30AB2610 = 0xEA99498D,
    Func40772610 = 0x5F3DF409,
    FuncA07A2610 = 0xD117BABE,
    Func10AD2610 = 0xF45D6637,
    FuncD0CC2610 = 0xC83A1BAA,
    Func00912610 = 0x863B9572,
    Func00C22610 = 0xEABDED78,
    FuncB0A42610 = 0xB19DA6CE,
    FuncF0D32610 = 0x4D994A96,
    Func308D2610 = 0x6FEB9B76,
    Func50912610 = 0xCFD6983E,
    FuncD08B2610 = 0xE5DE48E5,
    FuncF0AC2610 = 0x30DC748F,
    Func30AE2610 = 0x1EB13791,
    FuncB0852610 = 0xD20D29DF,
    FuncE0BF2610 = 0x7DD5B261,
    Func60952C10 = 0x0BBCCE50,
    Func30972C10 = 0x3225B2D2,
    Func10AA2C10 = 0x4370CC33,
    Func40A82C10 = 0xDB2D6805,
    Func80932C10 = 0x94E3D504,
    Func00992C10 = 0x7ACF7E00,
    FuncB09F2C10 = 0xC1CE87CD,
    Func308F2C10 = 0xEFCB59BB,
    Func409D2C10 = 0x1AC71F13,
    FuncD09A2C10 = 0x616AA082,
    Func10912C10 = 0x256D13B8,
    Func80A22C10 = 0xC95B2D7B,
    Func70A62C10 = 0x119B5747,
    Func50A42C10 = 0x1EEDC052,
    FuncA0CD2810 = 0xB9582B10,
    FuncE0AA2810 = 0xCE7F37A0,
    FuncA0C02810 = 0x86BD66F9,
    FuncA0EF1110 = 0xE23FA9A2,
    Func103C1310 = 0x55A45AD2,
    Func503D1310 = 0x8B8C90E4,
    Func50341310 = 0xC0C4C680,
    Func90431310 = 0xACCE03F4,
    Func20331310 = 0x7DEF8998,
    Func00461310 = 0x29E0A109,
    Func30471310 = 0x25ABDA26,
    FuncF0351310 = 0xFB90BDC1,
    Func403F1310 = 0xFA66ED29,
    Func501A2910 = 0xDAB71FB6,
    FuncB0070E10 = 0x9B8BD766,
    FuncC0050E10 = 0x87999729,
    FuncC0010E10 = 0x829269F1,
    FuncC0FF0D10 = 0x9E8029BE,
    FuncC0030E10 = 0x33619AC3,
    Func90AE2810 = 0x8AFD39C0,
    FuncD0AA2810 = 0xD112BCD0,
    FuncE0B62810 = 0xF159DF98,
    FuncD0C72810 = 0xAE621CC9,
    FuncC0C72810 = 0xE1977C19,
    FuncE0C72810 = 0x9FA7E206,
    FuncF0C72810 = 0x391728AE,
    FuncE0B60D10 = 0xD4BF6E90,
    FuncC0B70D10 = 0x9CE07DE0,
    Func50B70D10 = 0x62D71566,
    Func20BD2810 = 0xCBE4D53C,
    Func70CA2810 = 0x9E724364,
    Func00B72810 = 0x7BF85571,
    Func90C32810 = 0xD0CE373B,
    Func10910C10 = 0x3762294E,
    FuncA0B52810 = 0x361BF51C,
    FuncF0BA2810 = 0x7E2C4B7B,
    Func20B22810 = 0x9A60640C,
    Func00C82810 = 0x4A930222,
    FuncB0252310 = 0x8545513E,
    FuncA0272310 = 0xEFB6CDE2,
    Func103D2310 = 0x1813F7C4,
    FuncD0FC2210 = 0x805CC526,
    FuncA0DD2210 = 0xE607D50F,
    FuncD0C82210 = 0x11BDC4D7,
    Func70302310 = 0xD9C0E326,
    FuncC02A2310 = 0xE5A518DC,
    FuncC0322310 = 0x38A18C40,
    Func002E2310 = 0x2FA7E0EB,
    FuncB0E52210 = 0x29FBC5EA,
    Func10E02210 = 0x53DABBCA,
    Func400F2310 = 0xCDA14D8A,
    Func40E32210 = 0xCE8200E8,
    Func90052310 = 0x33C955EE,
    FuncF0452310 = 0xB43C2E0D,
    Func90D02210 = 0x977C45E6,
    Func60CF2210 = 0xF74926F5,
    Func30202310 = 0x4C8C1BD2,
    FuncE0452310 = 0xC55ABF26,
    Func10951110 = 0x69A6F90D,
    Func90971210 = 0xF4C71DEC,
    Func00362310 = 0x2D6F7431,
    Func80402310 = 0xD3A092B1,
    FuncF0071310 = 0x66583AFE,
    FuncA04C2310 = 0x60A56701,
    FuncB0492310 = 0xC073CB58,
    Func804E2310 = 0x7EA256DE,
    Func80502310 = 0xD6522C3F,
    Func80F02210 = 0x08F2BAB4,
    FuncB0FE2210 = 0x112BA1A5,
    Func20152310 = 0x9EA74659,
    FuncC00C2310 = 0xD4A859F2,
    FuncE0F42210 = 0x95E11D62,
    Func70102310 = 0x1E8CD32B,
    Func70472310 = 0xA0B3E958,
    Func40572310 = 0xCB7C208D,
    Func80582310 = 0x0CE2E9D9,
    Func80562310 = 0xC9D86E33,
    Func20582310 = 0x85FF5A15,
    FuncA0562310 = 0x63685979,
    Func00CD2210 = 0xBF527664,
    Func80242310 = 0xBF63A7EC,
    Func30552310 = 0x107DEA30,
    FuncB0D82210 = 0x7C5471C0,
    FuncD0362310 = 0x80E2301A,
    Func503F2310 = 0xDA425C46,
    Func30CE2210 = 0x10A3EF29,
    Func70122310 = 0xE62AB414,
    FuncC0132310 = 0x0BCD56E5,
    Func00382310 = 0x99D379DE,
    Func40182310 = 0x2D9BAC00,
    Func20442310 = 0x3ACA17A6,
    FuncE0D92210 = 0x45EFAB64,
    Func40202310 = 0x0DEC64E5,
    FuncF0182310 = 0x45BA381B,
    Func40072310 = 0x08A3C81D,
    Func60D52210 = 0x59C4CFC7,
    Func50E72210 = 0x609AA6C5,
    Func40CB2210 = 0x79E4D097,
    Func901D2310 = 0xD5DEC731,
    Func00422310 = 0xF11C960B,
    FuncC0ED2210 = 0x721FACEB,
    FuncA0522310 = 0xC6D56F44,
    Func70022310 = 0xAB4A478E,
    Func30EB2210 = 0xC2B6FB12,
    Func70180810 = 0x80E9A056,
    Func801E0810 = 0xB4C5D8BA,
    FuncB0210810 = 0x954DF4FB,
    FuncF0270810 = 0xBCB11611,
    Func502A0810 = 0x9873472B,
    FuncE02E0810 = 0x1071E0D3,
    Func902C0810 = 0x2F04D0C1,
    Func40310810 = 0x0BC681FB,
    Func101B0810 = 0x93456591,
    Func90240810 = 0xB78734AB
}

/// Generates a NvAPI compatible version for a specified struct type
///
/// **Arguments**
///
/// * `v` - Version number
/// * `T` - The type of the struct that this version is generated for
#[allow(non_snake_case)]
fn NVAPI_VERSION<T>(v: u32) -> u32 {
    let size: u32 = mem::size_of::<T>() as u32;
    (size | v<<16) as u32
}

lazy_static! {
    /// Dynamic load of nvapi{64}.dll
    static ref NVAPI: Library = {
        let system_root = env::var("SystemRoot").unwrap_or(String::from("C:\\Windows"));
        let nvapi_path = format!("{}\\System32\\{}", system_root, NVAPI_DLL);
        Library::new(nvapi_path).unwrap()
    };
    /// Registration of `NvAPI_QueryInterface` function which provides pointer to all the
    /// function of NvAPI.
    static ref NvAPI_QueryInterface: Symbol<'static, unsafe extern "C" fn(QueryPtr) -> *const ()> =
        unsafe { NVAPI.get(b"nvapi_QueryInterface").unwrap() };
}

/// All these functions return a status code upon call. There are wrappers for all these function
/// through the `NvFanController` trait and are part of the documented NVAPI spec.
#[allow(dead_code)]
#[cfg_attr(target_arch="x86", link(name="nvapi", kind="static"))]
#[cfg_attr(target_arch="x86_64", link(name="nvapi64", kind="static"))]
extern {
    /// Initialises NvAPI.
    fn NvAPI_Initialize() -> libc::c_int;

    /// Unloads nvapi{64}.dll from memory.
    fn NvAPI_Unload() -> libc::c_int;

    /// Returns the version of the NVAPI library
    ///
    /// ***Arguments***
    ///
    /// * `ver` - An `NvAPI_ShortString` that will be populated upon function call with the NVAPI
    /// version string
    fn NvAPI_GetInterfaceVersionString(ver: *mut NvAPI_ShortString) -> libc::c_int;

    /// Get the name of the specified GPU
    ///
    /// **Arguments**
    ///
    /// * `handle` - The GPU for which the name is requested
    /// * `name` - A pointer to an `NvAPI_ShortString` that will be populated with the adapter name
    /// upon function call.
    fn NvAPI_GPU_GetFullName(handle: NvPhysicalGpuHandlePtr, name: *mut NvAPI_ShortString) -> libc::c_int;

    /// Returns the fan speed in RPM
    ///
    /// **Arguments**
    ///
    /// * `handle` - The GPU for which the fan speed is requested
    /// * `value` - The fan speed in RPM; it will be populated upon function call
    fn NvAPI_GPU_GetTachReading(handle: NvPhysicalGpuHandlePtr, value: *mut u32) -> libc::c_int;

    /// Returns the thermal status of the specified GPU
    ///
    /// **Arguments**
    ///
    /// * `handle` - The GPU for which the thermal settings are requested.
    /// * `index` - The sensor index
    /// * `settings` - The thermal settings struct; it will be populated upon function call
    fn NvAPI_GPU_GetThermalSettings(handle: NvPhysicalGpuHandlePtr, index: u32, settings: *mut NV_GPU_THERMAL_SETTINGS_V2) -> libc::c_int;

    /// Returns the NVidia driver version
    ///
    /// **Arguments**
    ///
    /// * `driverVersion` - The driver version number; it will be populated upon function call
    /// * `branch` - The driver version branch; it will be populated upon function call
    fn NvAPI_SYS_GetDriverAndBranchVersion(driverVersion: *mut u32, branch: *mut NvAPI_ShortString) -> libc::c_int;
}

/// Sets the cooler level for the specified GPU. This is an undocumented function.
///
/// **Arguments**
///
/// * `handle` - The GPU for which the cooler levels will be set
/// * `index` - The cooler index
/// * `levels` - The cooler levels for the specified GPU
#[allow(non_snake_case)]
unsafe fn NvAPI_GPU_SetCoolerLevels(handle: NvPhysicalGpuHandlePtr, index: u32, levels: *const NvGpuCoolerLevels) -> libc::c_int {
    let func = mem::transmute::<
        *const (), fn(NvPhysicalGpuHandlePtr, u32, *const NvGpuCoolerLevels) -> libc::c_int
    >(NvAPI_QueryInterface(QueryCode::SetCoolerLevels as QueryPtr));
    func(handle, index, levels)
}

/// Returns the active cooler settings for the specified GPU and cooler. This is an undocumented
/// function.
///
/// **Arguments**
///
/// * `handle` - The GPU for which the cooler settings are requested
/// * `index` - The cooler index
/// * `settings` - The `NvGpuCoolerSettings` containing the requested information; it will be
/// populated upon function call
#[allow(non_snake_case)]
unsafe fn NvAPI_GPU_GetCoolerSettings(handle: NvPhysicalGpuHandlePtr, index: u32, settings: *mut NvGpuCoolerSettings) -> libc::c_int {
    let func = mem::transmute::<
        *const (), fn(NvPhysicalGpuHandlePtr, u32, *mut NvGpuCoolerSettings) -> libc::c_int
    >(NvAPI_QueryInterface(QueryCode::GetCoolerSettings as QueryPtr));
    func(handle, index, settings)
}

/// Returns the GPU utilisation. This is an undocumented function.
///
/// **Arguments**
///
/// * `handle` - The GPU for which the utilisation is requested
/// * `usages` - The `NvGpuUsages` containing the requested information; it will be populated upon
/// function call
#[allow(non_snake_case)]
unsafe fn NvAPI_GPU_GetUsages(handle: NvPhysicalGpuHandlePtr, usages: *mut NvGpuUsages) -> libc::c_int {
    let func = mem::transmute::<
        *const (), fn(NvPhysicalGpuHandlePtr, *mut NvGpuUsages) -> libc::c_int
    >(NvAPI_QueryInterface(QueryCode::GetUsages as QueryPtr));
    func(handle, usages)
}

/// Lists all available physical GPUS into the specified array.
///
/// **Arguments**
///
/// * `handles` - An array of unitialized `NvPhysicalGpuHandle`s. The size of this function is
/// specified by the static variable `NVAPI_MAX_PHYSICAL_GPUS`. The array will be populated
/// upon function call.
///
/// * `count` - The number of available physical GPUs. These variable will be populated upon
/// function call.
#[allow(non_snake_case)]
unsafe fn NvAPI_EnumPhysicalGPUs(handles: *mut [NvPhysicalGpuHandlePtr; NVAPI_MAX_PHYSICAL_GPUS], count: *mut u32) -> libc::c_int {
    let func = mem::transmute::<
        *const(), fn(*mut [NvPhysicalGpuHandlePtr; NVAPI_MAX_PHYSICAL_GPUS], *mut u32) -> libc::c_int
    >(NvAPI_QueryInterface(QueryCode::NvAPI_EnumPhysicalGPUs as QueryPtr));
    func(handles, count)
}

/// Retrieves cooler information using the new client API. This is an undocumented function.
///
/// **Arguments**
///
/// * `handle` - The GPU for which the utilisation is requested
/// * `usages` - The `NvGpuFanCoolersInfo` containing the requested information; it will be
/// populated upon function call
#[allow(non_snake_case)]
unsafe fn NvAPI_GPU_GetClientFanCoolersInfo(handle: NvPhysicalGpuHandlePtr,
    infos: *mut NvGpuFanCoolersInfo) -> libc::c_int {

    let func = mem::transmute::<
        *const(), fn(NvPhysicalGpuHandlePtr, *mut NvGpuFanCoolersInfo) -> libc::c_int
    >(NvAPI_QueryInterface(QueryCode::ClientFanCoolersGetInfo as QueryPtr));
    func(handle, infos)
}

/// Retrieves cooler status using the new client API. This is an undocumented function.
///
/// **Arguments**
///
/// * `handle` - The GPU for which the utilisation is requested
/// * `usages` - The `NvGpuFanCoolersStatus` containing the requested information; it
/// will be populated upon function call
#[allow(non_snake_case)]
unsafe fn NvAPI_GPU_GetClientFanCoolersStatus(handle: NvPhysicalGpuHandlePtr,
    status: *mut NvGpuFanCoolersStatus) -> libc::c_int {

    let func = mem::transmute::<
        *const(), fn(NvPhysicalGpuHandlePtr, *mut NvGpuFanCoolersStatus) -> libc::c_int
    >(NvAPI_QueryInterface(QueryCode::ClientFanCoolersGetStatus as QueryPtr));
    func(handle, status)
}

/// Retrieves cooler control mode using the new client API. This is an
/// undocumented function.
///
/// **Arguments**
///
/// * `handle` - The GPU for which the utilisation is requested
/// * `status` - The `NvGpuFanCoolersStatus` containing the requested information; it
/// will be populated upon function call
#[allow(non_snake_case)]
unsafe fn NvAPI_GPU_GetClientFanCoolersControl(handle: NvPhysicalGpuHandlePtr,
    status: *mut NvGpuFanCoolersControl) -> libc::c_int {

    let func = mem::transmute::<
        *const(), fn(NvPhysicalGpuHandlePtr, *mut NvGpuFanCoolersControl) -> libc::c_int
    >(NvAPI_QueryInterface(QueryCode::ClientFanCoolersGetControl as QueryPtr));
    func(handle, status)
}

/// Sets cooler control mode using the new client API. This is an
/// undocumented function.
///
/// **Arguments**
///
/// * `handle` - The GPU for which the utilisation is requested
/// * `usages` - The `NvGpuFanCoolersStatus` containing the requested information; it
/// will be populated upon function call
#[allow(non_snake_case)]
unsafe fn NvAPI_GPU_SetClientFanCoolersControl(handle: NvPhysicalGpuHandlePtr,
    status: *mut NvGpuFanCoolersControl) -> libc::c_int {

    let func = mem::transmute::<
        *const(), fn(NvPhysicalGpuHandlePtr, *mut NvGpuFanCoolersControl) -> libc::c_int
    >(NvAPI_QueryInterface(QueryCode::ClientFanCoolersSetControl as QueryPtr));
    func(handle, status)
}


/// A representation of the NvAPI_ShortString. It is an array of `c_char` with a predefined length.
#[repr(C)]
struct NvAPI_ShortString {
    inner: [libc::c_char; NVAPI_SHORT_STRING_MAX]
}

impl NvAPI_ShortString {
    /// Create an empty `NvAPI_ShortString` consisting entirely of \0
    fn new() -> NvAPI_ShortString {
        NvAPI_ShortString { inner: [0 as libc::c_char; NVAPI_SHORT_STRING_MAX] }
    }

    /// Returns a `String` representation of this `NvAPI_ShortString`. This copied data
    /// in order to be useful.
    fn to_string(&self) -> String {
        unsafe { CStr::from_ptr(self.inner.as_ptr()).to_str().unwrap().to_owned() }
    }
}

/// A GPU handle.
#[repr(C)]
#[derive(Copy, Clone, Debug)]
struct NvPhysicalGpuHandle { unused: libc::c_int }
type NvPhysicalGpuHandlePtr = *mut NvPhysicalGpuHandle;

#[repr(C)]
#[derive(Copy, Clone)]
#[allow(dead_code, non_camel_case_types)]
enum NV_THERMAL_CONTROLLER {
    NONE = 0,
    GPU_INTERNAL = 1,
    ADM1032,
    MAX6649,
    MAX1617,
    LM99,
    LM89,
    LM64,
    ADT7473,
    SBMAX6649,
    VBIOSEVT,
    OS,
    UNKNOWN = -1
}

#[repr(C)]
#[derive(Copy, Clone)]
#[allow(dead_code, non_camel_case_types)]
enum NV_THERMAL_TARGET {
    NONE          = 0,
    GPU           = 1,
    MEMORY        = 2,
    POWER_SUPPLY  = 4,
    BOARD         = 8,
    VCD_BOARD     = 9,
    VCD_INLET     = 10,
    VCD_OUTLET    = 11,
    ALL           = 15,
    UNKNOWN       = -1,
}

/// A representation of a thermal sensor
#[repr(C)]
#[derive(Copy, Clone)]
struct NvThermalSensor {
    controller: NV_THERMAL_CONTROLLER,
    default_min_temp: i32,
    default_max_temp: i32,
    current_temp: i32,
    target: NV_THERMAL_TARGET
}

impl NvThermalSensor {
    /// Instantiates a new empty thermal sensors. The field are further populated when a function
    /// call occurs.
    fn new() -> NvThermalSensor {
        NvThermalSensor {
            controller: NV_THERMAL_CONTROLLER::UNKNOWN,
            default_min_temp: -1,
            default_max_temp: -1,
            current_temp: -1,
            target: NV_THERMAL_TARGET::UNKNOWN
        }
    }
}

/// A thermal settings struct
#[repr(C)]
#[allow(non_snake_case)]
struct NV_GPU_THERMAL_SETTINGS_V2 {
    /// Struct version; created with `NVAPI_VERSION<T>()`
    version: u32,
    /// Number of available sensors
    count: u32,
    /// A list of all the available sensors
    sensors: [NvThermalSensor; NVAPI_MAX_THERMAL_SENSORS_PER_GPU]
}

impl NV_GPU_THERMAL_SETTINGS_V2 {
    /// Returns a new `NV_GPU_THERMAL_SETTINGS_V2`; its fields are further populated when a
    /// function call occurs.
    fn new() -> NV_GPU_THERMAL_SETTINGS_V2 {
        NV_GPU_THERMAL_SETTINGS_V2 {
            version: NVAPI_VERSION::<NV_GPU_THERMAL_SETTINGS_V2>(2u32),
            count: 0,
            sensors: [NvThermalSensor::new(); NVAPI_MAX_THERMAL_SENSORS_PER_GPU]
        }
    }

    fn temp(&self, index: u32) -> i32 {
        self.sensors[index as usize].current_temp
    }

    /*fn target(&self, index: u32) -> NV_THERMAL_TARGET {
        self.sensors[index as usize].target
    }*/
}

/// A cooler policy enum
#[repr(C)]
#[derive(Clone, Copy, Debug)]
#[allow(non_camel_case_types)]
#[allow(dead_code)]
enum NV_COOLER_POLICY {
    /// When a cooler is not available the policy is always `NONE` (0)
    NONE = 0,
    /// Explicitly set cooler speed
    MANUAL = 1,
    /// Performance profile
    PERF = 2,
    /// Discrete temperature steps
    DISCRETE = 4,
    /// Continuous temperature curve (hardware controlled)
    CONTINUOUS_HW = 8,
    /// Continuous temperature curver (software controlled)
    CONTINUOUS_SW = 16,
    /// The default policy; this will always change to the default policy for the GPU
    DEFAULT = 32,
}


/// Cooler control mode (client API)
#[repr(C)]
#[derive(Clone, Copy, Debug)]
#[allow(non_camel_case_types)]
#[allow(dead_code)]
enum NV_COOLER_CONTROL_MODE {
    AUTO = 0,
    MANUAL = 1,
}


/// The level (in %) for a GPU cooler
#[repr(C)]
#[derive(Clone, Copy)]
#[allow(non_snake_case)]
struct NvLevel {
    /// The level value
    level: i32,
    /// The associated policy
    policy: NV_COOLER_POLICY
}

/// Cooler levels for each cooler in the GPU
#[repr(C)]
#[allow(non_snake_case)]
struct NvGpuCoolerLevels {
    /// Struct version
    version: u32,
    coolers: [NvLevel; NVAPI_MAX_COOLERS_PER_GPU]
}

impl NvGpuCoolerLevels {
    /// Returns a new `NvGpuCoolerLevels`; it is usually populated upon function call
    fn new() -> NvGpuCoolerLevels {
        NvGpuCoolerLevels {
            version: NVAPI_VERSION::<NvGpuCoolerLevels>(1u32),
            coolers: [NvLevel { level: -1, policy: NV_COOLER_POLICY::NONE };
                        NVAPI_MAX_COOLERS_PER_GPU]
        }
    }

    /// Set the level of the cooler fan (in %)
    ///
    /// **Arguments**
    ///
    /// * `index` - The index of the cooler
    /// * `level` - The cooler level (in %)
    fn set_level(&mut self, index: u32, level: i32) {
        self.coolers[index as usize].level = level;
    }

    /// Set the policy governing the specified cooler fan
    ///
    /// **Arguments**
    ///
    /// * `index` - The index of the cooler
    /// * `poliy` - The `NV_COOLER_POLICY` for the cooler
    fn set_policy(&mut self, index: u32, policy: NV_COOLER_POLICY) {
        self.coolers[index as usize].policy = policy;
    }
}

/// A GPU cooler
#[repr(C)]
#[derive(Clone, Copy)]
#[allow(non_snake_case)]
struct NvCooler {
    cooler_type: i32,
    /// Controller from `NV_THERMAL_CONTROLLER`
    controller: i32,
    /// Default minimum speed in (%)
    default_min: i32,
    /// Default maximum speed in (%)
    default_max: i32,
    /// Current minimum speed in (%)
    current_min: i32,
    /// Current maximum speed in (%)
    current_max: i32,
    /// Current level of the GPU cooler (%)
    current_level: i32,
    /// Default cooler policy from `NV_COOLER_POLICY`
    default_policy: NV_COOLER_POLICY,
    /// Current cooler policy from `NV_COOLER_POLICY`
    current_policy: NV_COOLER_POLICY,
    /// Cooling target from `NV_THERMAL_TARGET`
    target: i32,
    control_type: i32,
    /// Cooler activity
    active: i32,
}

impl NvCooler {
    unsafe fn zeroed() -> Self {
        mem::zeroed()
    }
}

/// Cooler settings
#[repr(C)]
struct NvGpuCoolerSettings {
    /// Struct version
    version: u32,
    /// Number of available coolers
    count: u32,
    /// All `NvCooler`s
    coolers: [NvCooler; NVAPI_MAX_COOLERS_PER_GPU]
}

impl NvGpuCoolerSettings {
    /// Creates a new `NvGpuCoolerSettings` with sane defaults
    fn new() -> NvGpuCoolerSettings {
        NvGpuCoolerSettings {
            version: NVAPI_VERSION::<NvGpuCoolerSettings>(1u32),
            count: 0,
            coolers: [unsafe { NvCooler::zeroed() }; NVAPI_MAX_COOLERS_PER_GPU]
        }
    }
}

/// Single cooler information (for client API)
#[repr(C)]
#[derive(Copy, Clone, Debug)]
struct NvFanCoolerInfo {
    id: u32,
    _reserved1: u32,
    _reserved2: u32,
    max_rpm: u32,
    _reserved3: [u32; 8]
}

impl NvFanCoolerInfo {
    unsafe fn zeroed() -> Self {
        mem::zeroed()
    }
}

/// GPU cooler information (for client API)
#[repr(C)]
// #[derive(Debug)]
struct NvGpuFanCoolersInfo {
    version: u32,
    call_success: u32,
    count: u32,
    _reserved2: [u32; 8],
    coolers: [NvFanCoolerInfo; NVAPI_CLIENT_MAX_COOLERS_PER_GPU]
}

impl NvGpuFanCoolersInfo {
    fn new() -> NvGpuFanCoolersInfo {
        NvGpuFanCoolersInfo {
            version: NVAPI_VERSION::<NvGpuFanCoolersInfo>(1u32),
            call_success: 0,
            count: 0,
            _reserved2: [0u32; 8],
            coolers: [ unsafe { NvFanCoolerInfo::zeroed() };
                 NVAPI_CLIENT_MAX_COOLERS_PER_GPU]
        }
    }
}

/// Single cooler status (rpm, levels, etc.) using the new client API
#[repr(C)]
#[derive(Copy, Clone, Debug)]
struct NvFanCoolerStatus {
    id: u32,
    rpm: u32,
    minimum: u32,
    maximum: u32,
    level: u32,
    _reserved: [u32; 8]
}

impl NvFanCoolerStatus {
    unsafe fn zeroed() -> Self {
        mem::zeroed()
    }
}

/// GPU cooler status (rpm, levels, etc.) using the new client API
#[repr(C)]
struct NvGpuFanCoolersStatus {
    version: u32,
    count: u32,
    _reserved: [u32; 8],
    coolers: [NvFanCoolerStatus; NVAPI_CLIENT_MAX_COOLERS_PER_GPU]
}

impl NvGpuFanCoolersStatus {
    fn new() -> NvGpuFanCoolersStatus {
        NvGpuFanCoolersStatus {
            version: NVAPI_VERSION::<NvGpuFanCoolersStatus>(1u32),
            count: 0,
            _reserved: [0u32; 8],
            coolers: [ unsafe { NvFanCoolerStatus::zeroed() };
                NVAPI_CLIENT_MAX_COOLERS_PER_GPU]
        }
    }
}


/// Fan control structure (new client API)
#[repr(C)]
#[derive(Copy, Clone, Debug)]
struct NvFanCoolerControl {
    id: u32,
    level: u32,
    mode: NV_COOLER_CONTROL_MODE,
    _reserved: [u32; 8]
}

impl NvFanCoolerControl {
    unsafe fn zeroed() -> Self {
        mem::zeroed()
    }
}

/// GPU Fan control (new client API)
#[repr(C)]
#[derive(Debug)]
struct NvGpuFanCoolersControl {
    version: u32,
    _reserved1: u32,
    count: u32,
    _reserved2: [u32; 8],
    coolers: [NvFanCoolerControl; NVAPI_CLIENT_MAX_COOLERS_PER_GPU]
}

impl NvGpuFanCoolersControl {
    fn new() -> NvGpuFanCoolersControl {
        NvGpuFanCoolersControl {
            version: NVAPI_VERSION::<NvGpuFanCoolersControl>(1u32),
            _reserved1: 0u32,
            count: 0u32,
            _reserved2: [0u32; 8],
            coolers: [ unsafe { NvFanCoolerControl::zeroed() };
                NVAPI_CLIENT_MAX_COOLERS_PER_GPU]
        }
    }
}


/// GPU utilisation
#[repr(C)]
#[allow(non_snake_case)]
struct NvGpuUsages {
    /// Struct version
    version: u32,
    /// GPU utilisation for all GPUs
    usage: [u32; NVAPI_MAX_USAGES_PER_GPU]
}

impl NvGpuUsages {
    /// Creates a new `NvGpuUsages` with sane defaults
    fn new() -> NvGpuUsages {
        NvGpuUsages {
            version: NVAPI_VERSION::<NvGpuUsages>(1),
            usage: [0u32; NVAPI_MAX_USAGES_PER_GPU]
        }
    }
}

/// Helper to convert `NVCtrlFanControlState` to `NV_COOLER_POLICY`
///
/// **Arguments**
///
/// * `state` - The `NVCtrlFanControlState` to convert
fn mode_to_policy(state: NVCtrlFanControlState) -> NV_COOLER_POLICY {
    match state {
        NVCtrlFanControlState::Auto => NV_COOLER_POLICY::DEFAULT,
        NVCtrlFanControlState::Manual => NV_COOLER_POLICY::MANUAL,
    }
}

/// NvidiaControl is the main struct that monitors and controls the
/// GPU fan state in addition with thermal and general information.
pub struct NvidiaControl {
    /// Current lower and upper limits
    pub limits: (u16, u16),
    /// All GPU handles
    handles: [NvPhysicalGpuHandlePtr; NVAPI_MAX_PHYSICAL_GPUS],
    /// Indicates wether each handle uses the new RTX NvAPI Calls
    rtx: [bool; NVAPI_MAX_PHYSICAL_GPUS],
    /// Number of available GPUs in the system
    _gpu_count: u32
}

impl NvidiaControl {

    /// Initialises the native library corresponding to the current OS.
    /// `init()` should be called when calling `NvidiaControl::new()` so
    /// there is no need to call it directly.
    pub fn init(lim: (u16, u16)) -> Result<NvidiaControl, String> {
        match unsafe { NvAPI_Initialize() } {
            0 => {
                let mut handle: [NvPhysicalGpuHandlePtr; NVAPI_MAX_PHYSICAL_GPUS] = unsafe { mem::zeroed() };
                let mut count = 0 as u32;
                match unsafe { NvAPI_EnumPhysicalGPUs(&mut handle, &mut count) } {
                    0 => Ok({
                        let mut rtx = [false; NVAPI_MAX_PHYSICAL_GPUS];
                        for i in 0..count as usize {
                            rtx[i] = NvidiaControl::rtx_test(&handle[i])
                        }
                        NvidiaControl{ limits: lim, handles: handle, rtx: rtx, _gpu_count: count }
                    }),
                    i => Err(format!("NvAPI_EnumPhysicalGPUs() failed; error: {}", i))
                }
            },
            i => Err(format!("NvAPI_Initialize() failed; error: {}; No driver?", i))
        }
    }

    fn rtx_test(gpu_handle: &NvPhysicalGpuHandlePtr) -> bool {
        let mut cooler_settings = NvGpuCoolerSettings::new();
        match unsafe {
            NvAPI_GPU_GetCoolerSettings(
                *gpu_handle,
                NVAPI_COOLER_TARGET_ALL as _,
                &mut cooler_settings,
            )
        } {
            0 => { return false }
            _i => { return true }
        };
    }
}

impl Drop for NvidiaControl {
    fn drop(&mut self) {
        unsafe { NvAPI_Unload() };
    }
}

impl NvidiaControl {
    /// Check if the supplied GPU id corresponds to a physical GPU. This
    /// function will return an `Err` if the specified id is outside the
    /// defined boundaries or `()` otherwise.
    ///
    /// **Arguments**
    ///
    /// * `gpu` - The GPU id to check
    fn check_gpu_id(&self, gpu: u32) -> Result<(), String> {
        if gpu > (self._gpu_count - 1) {
            Err(format!("check_gpu_id() failed; id {} > {}",
                        gpu, self._gpu_count - 1))
        } else {
            Ok(())
        }
    }

    fn get_ctrl(&self, gpu: u32) -> Result<NvGpuFanCoolersControl, String> {
        let mut control = NvGpuFanCoolersControl::new();
        match unsafe {
            NvAPI_GPU_GetClientFanCoolersControl(self.handles[gpu as usize], &mut control)
        } {
            0 => {
                if control.count == 0 {
                    return Err("No available coolers".to_string());
                }

                Ok(control)
            },
            i => Err(format!("NvAPI_GPU_GetClientFanCoolersStatus() failed; error {}", i))
        }
    }

    fn gpu_coolers_rtx(&self, gpu: u32) -> Result<Cow<Vec<u32>>, String> {
        let mut status = NvGpuFanCoolersStatus::new();
        match unsafe {
            NvAPI_GPU_GetClientFanCoolersStatus(self.handles[gpu as usize], &mut status)
        } {
            0 => {
                let count = status.count as u32;
                Ok(Cow::Owned((0..count).collect::<Vec<u32>>()))
            }
            i => Err(format!(
                "NvAPI_GPU_GetClientFanCoolersStatus() failed; error {}",
                i
            ))
        }
    }

    fn get_ctrl_status_rtx(&self, gpu: u32) -> Result<NVCtrlFanControlState, String> {
        match self.get_ctrl(gpu)?.coolers[0].mode {
            NV_COOLER_CONTROL_MODE::AUTO => Ok(NVCtrlFanControlState::Auto),
            NV_COOLER_CONTROL_MODE::MANUAL => Ok(NVCtrlFanControlState::Manual)
        }
    }

    fn set_ctrl_type_rtx(&self, gpu: u32, typ: NVCtrlFanControlState) -> Result<(), String> {
        let mut control = self.get_ctrl(gpu)?;

        // at this point `control` should be properly populated
        let count = control.count as usize;
        let policy = match typ {
            NVCtrlFanControlState::Auto => NV_COOLER_CONTROL_MODE::AUTO,
            NVCtrlFanControlState::Manual => NV_COOLER_CONTROL_MODE::MANUAL,
        };

        // update policies for all coolers
        for c in 0..count {
            control.coolers[c].mode = policy;
        }

        // and set it back
        match unsafe {
            NvAPI_GPU_SetClientFanCoolersControl(self.handles[gpu as usize], &mut control)
        } {
            0 => Ok(()),
            i => Err(format!("NvAPI_GPU_SetClientFanCoolersControl() failed; error {}", i))
        }
    }

    fn set_fanspeed_rtx(&self, gpu: u32, _id: u32, speed: i32) -> Result<(), String> {
        let true_speed = self.true_speed(speed);

        let mut control = NvGpuFanCoolersControl::new();
        match unsafe {
            NvAPI_GPU_GetClientFanCoolersControl(self.handles[gpu as usize], &mut control)
        } {
            0 => {
                if control.count == 0 {
                    return Err("No available coolers".to_string());
                }
            },
            i => {
                return Err(format!("NvAPI_GPU_GetClientFanCoolersStatus() failed; error {}", i))
            }
        }

        // at this point `control` should be properly populated
        let count = control.count as usize;

        for c in 0..count {
            control.coolers[c].level = true_speed.try_into().unwrap();
        }

        // and set it back
        match unsafe {
            NvAPI_GPU_SetClientFanCoolersControl(self.handles[gpu as usize], &mut control)
        } {
            0 => Ok(()),
            i => Err(format!("NvAPI_GPU_SetClientFanCoolersControl() failed; error {}", i))
        }
    }

    fn get_fanspeed_rtx(&self, gpu: u32, id: u32) -> Result<i32, String> {
        let mut status = NvGpuFanCoolersStatus::new();
        match unsafe {
            NvAPI_GPU_GetClientFanCoolersStatus(self.handles[gpu as usize], &mut status)
        } {
            0 => Ok(status.coolers[id as usize].level.try_into().unwrap()),
            i => Err(format!(
                "NvAPI_GPU_GetClientFanCoolersStatus() failed; error {}",
                i
            ))
        }
    }

    fn get_fanspeed_rpm_rtx(&self, gpu: u32, id: u32) -> Result<i32, String> {
        let mut status = NvGpuFanCoolersStatus::new();
        match unsafe {
            NvAPI_GPU_GetClientFanCoolersStatus(self.handles[gpu as usize], &mut status)
        } {
            0 => Ok(status.coolers[id as usize].rpm.try_into().unwrap()),
            i => Err(format!(
                "NvAPI_GPU_GetClientFanCoolersStatus() failed; error {}",
                i
            )),
        }
    }
}

impl NvFanController for NvidiaControl {
    fn get_temp(&self, gpu: u32) -> Result<i32, String> {

        self.check_gpu_id(gpu)?;

        let mut thermal = NV_GPU_THERMAL_SETTINGS_V2::new();
        match unsafe { NvAPI_GPU_GetThermalSettings(self.handles[gpu as usize],
                                                    0, &mut thermal) }
        {
            0 => Ok(thermal.temp(0)),
            i => Err(format!("NvAPI_GPU_GetThermalSettings() failed; error {}", i))
        }
    }

    fn gpu_count(&self) -> Result<u32, String> {
        Ok(self._gpu_count)
    }

    fn is_rtx(&self, gpu: u32) -> Result<bool, String> {
        Ok(self.rtx[gpu as usize])
    }

    fn gpu_coolers(&self, gpu: u32) -> Result<Cow<Vec<u32>>, String> {
        self.check_gpu_id(gpu)?;

        if self.rtx[gpu as usize] {
            return self.gpu_coolers_rtx(gpu)
        }

        let mut cooler_settings = NvGpuCoolerSettings::new();
        match unsafe {
            NvAPI_GPU_GetCoolerSettings(
                self.handles[gpu as usize],
                NVAPI_COOLER_TARGET_ALL as _,
                &mut cooler_settings,
            )
        } {
            0 => {
                let count = cooler_settings.count as u32;
                Ok(Cow::Owned((0..count).collect::<Vec<u32>>()))
            }
            i => Err(format!("NvAPI_GPU_GetCoolerSettings() failed; error {}", i))
        }
    }

    fn get_ctrl_status(&self, gpu: u32) -> Result<NVCtrlFanControlState, String> {
        self.check_gpu_id(gpu)?;

        if self.rtx[gpu as usize] {
            return self.get_ctrl_status_rtx(gpu)
        }

        let mut cooler_settings = NvGpuCoolerSettings::new();
        match unsafe { NvAPI_GPU_GetCoolerSettings(self.handles[gpu as usize],
                                                   NVAPI_COOLER_TARGET_ALL as _,
                                                   &mut cooler_settings) }
        {
            0 => {
                // Technically each cooler can have different policy; however for our
                // purpose all coolers should ideally have the same policy. So,
                // unless the policy was not set by nvfancontrol (which should not
                // be the case) coolers[0]...coolers[n] should follow the same policy.
                // Hence return only the status of coolers[0].
                // I'm wondering if it would make better sense to check all coolers and
                // return an error if policies differ.
                match cooler_settings.coolers[0].current_policy {
                    NV_COOLER_POLICY::MANUAL => { Ok(NVCtrlFanControlState::Manual) },
                    NV_COOLER_POLICY::PERF          | NV_COOLER_POLICY::CONTINUOUS_SW |
                    NV_COOLER_POLICY::CONTINUOUS_HW | NV_COOLER_POLICY::DEFAULT |
                    NV_COOLER_POLICY::DISCRETE => {
                            Ok(NVCtrlFanControlState::Auto)
                    },
                    i => {
                        Err(format!("NvAPI_GPU_GetCoolerSettings() unknown policy: {:?}", i))
                    }
                }

            },
            i => Err(format!("NvAPI_GPU_GetCoolerSettings() failed; error {}", i))
        }
    }

    fn set_ctrl_type(&self, gpu: u32, typ: NVCtrlFanControlState) -> Result<(), String> {
        self.check_gpu_id(gpu)?;

        if self.rtx[gpu as usize] {
            return self.set_ctrl_type_rtx(gpu, typ)
        }

        let coolers = &*self.gpu_coolers(gpu)?;
        let mut levels = NvGpuCoolerLevels::new();
        let policy = mode_to_policy(typ);

        for c in coolers {
            // Retain existing fanspeed for cooler c
            let fanspeed = self.get_fanspeed(gpu, *c)?;

            levels.set_policy(*c, policy);
            levels.set_level(*c, fanspeed);
        }

        match unsafe { NvAPI_GPU_SetCoolerLevels(self.handles[gpu as usize],
                                                 NVAPI_COOLER_TARGET_ALL as _, &levels) }
        {
            0 => { Ok(()) },
            i => { return Err(format!("NvAPI_GPU_SetCoolerLevels() failed; error {}", i)) }
        }

    }

    fn get_fanspeed(&self, gpu: u32, id: u32) -> Result<i32, String> {
        self.check_gpu_id(gpu)?;

        if self.rtx[gpu as usize] {
            return self.get_fanspeed_rtx(gpu, id)
        }

        {
            let mut cooler_settings = NvGpuCoolerSettings::new();
            match unsafe {
                NvAPI_GPU_GetCoolerSettings(self.handles[gpu as usize], id, &mut cooler_settings)
            } {
                0 => Ok(cooler_settings.coolers[id as usize].current_level),
                i => Err(format!("NvAPI_GPU_GetCoolerSettings() failed; error {}", i)),
            }
        }
    }

    fn get_fanspeed_rpm(&self, gpu: u32, id: u32) -> Result<i32, String> {
        self.check_gpu_id(gpu)?;

        if self.rtx[gpu as usize] {
            return self.get_fanspeed_rpm_rtx(gpu, id)
        }

        let mut speed = 0 as libc::c_uint;
        match unsafe { NvAPI_GPU_GetTachReading(self.handles[gpu as usize], &mut speed) } {
            0 => Ok(speed as i32),
            i => Err(format!("NvAPI_GPU_GetTachReading() failed; error {}", i)),
        }
    }

    fn set_fanspeed(&self, gpu: u32, id: u32, speed: i32) -> Result<(), String> {
        self.check_gpu_id(gpu)?;

        if self.rtx[gpu as usize] {
            return self.set_fanspeed_rtx(gpu, id, speed)
        }

        let true_speed = self.true_speed(speed);

        // Retain the existing (global) policy for cooler
        let policy = match self.get_ctrl_status(gpu) {
            Ok(mode) => mode_to_policy(mode),
            Err(e) => { return Err(e); }
        };

        let mut levels = NvGpuCoolerLevels::new();
        levels.set_policy(id, policy);
        levels.set_level(id, true_speed as i32);
        match unsafe { NvAPI_GPU_SetCoolerLevels(self.handles[gpu as usize],
                                                 id, &levels) }
        {
            0 => { Ok(()) },
            i => { Err(format!("NvAPI_GPU_SetCoolerLevels() failed; error {}", i)) }
        }
    }

    fn set_fancontrol(&self, gpu: u32, speed: i32, typ: NVCtrlFanControlState) -> Result<(), String> {
        self.check_gpu_id(gpu)?;

        let true_speed = self.true_speed(speed);

        let mut control = self.get_ctrl(gpu)?;

        let policy = match typ {
            NVCtrlFanControlState::Auto => NV_COOLER_CONTROL_MODE::AUTO,
            NVCtrlFanControlState::Manual => NV_COOLER_CONTROL_MODE::MANUAL,
        };

        for c in 0..control.count as usize {
            control.coolers[c].level = true_speed.try_into().unwrap();
            control.coolers[c].mode = policy;
        }

        // and set it back
        match unsafe {
            NvAPI_GPU_SetClientFanCoolersControl(self.handles[gpu as usize], &mut control)
        } {
            0 => Ok(()),
            i => Err(format!("NvAPI_GPU_SetClientFanCoolersControl() failed; error {}", i))
        }
    }

    fn get_version(&self) -> Result<String, String> {
        let mut b = NvAPI_ShortString::new();
        let mut v: libc::c_uint = 0;

        match unsafe { NvAPI_SYS_GetDriverAndBranchVersion(&mut v, &mut b) } {
            0 => Ok(format!("{:.2}", (v as f32)/100.0)),
            i => Err(format!("NvAPI_SYS_GetDriverAndBranchVersion() failed; error {:?}", i))
        }
    }

    fn get_adapter(&self, gpu: u32) -> Result<String, String> {

        self.check_gpu_id(gpu)?;

        let mut adapter = NvAPI_ShortString::new();
        match unsafe { NvAPI_GPU_GetFullName(self.handles[gpu as usize], &mut adapter) } {
            0 => Ok(adapter.to_string()),
            i => Err(format!("NvAPI_GPU_GetFullName() failed; error {:?}", i))
        }
    }

    fn get_utilization(&self, gpu: u32) -> Result<HashMap<&str, i32>, String> {

        self.check_gpu_id(gpu)?;

        let mut gpu_usages = NvGpuUsages::new();
        match unsafe { NvAPI_GPU_GetUsages(self.handles[gpu as usize],
                                           &mut gpu_usages) }
        {
            0 => {
                let mut ret: HashMap<&str, i32> = HashMap::with_capacity(3);
                ret.insert("graphics", gpu_usages.usage[2] as i32);
                ret.insert("memory", gpu_usages.usage[6] as i32);
                ret.insert("video", gpu_usages.usage[10] as i32);
                Ok(ret)
            },
            i => Err(format!("NvAPI_GPU_GetUsages() failed; error {}", i))
        }
    }
}
